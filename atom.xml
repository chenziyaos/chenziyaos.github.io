<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>羽非衣</title>
  <subtitle>心静如水</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://iceziyao.github.io/"/>
  <updated>2016-11-23T23:09:53.428Z</updated>
  <id>https://iceziyao.github.io/</id>
  
  <author>
    <name>陈子瑶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>架构的演变</title>
    <link href="https://iceziyao.github.io/2016/11/22/arch/%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/"/>
    <id>https://iceziyao.github.io/2016/11/22/arch/架构演变/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2016-11-23T23:09:53.428Z</updated>
    
    <content type="html">&lt;h1 id=&quot;传统垂直应用架构&quot;&gt;&lt;a href=&quot;#传统垂直应用架构&quot; class=&quot;headerlink&quot; title=&quot;传统垂直应用架构&quot;&gt;&lt;/a&gt;传统垂直应用架构&lt;/h1&gt;&lt;h2 id=&quot;MVC架构&quot;&gt;&lt;a href=&quot;#MVC架构&quot; class=&quot;headerlink&quot; title=&quot;MVC架构&quot;&gt;&lt;/a&gt;MVC架构&lt;/h2&gt;&lt;p&gt;mvc架构，即spring+Struts+iBatis/Hibernate+Tomcat&lt;br&gt;MVC架构通常分为三层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;视图展示层：&lt;/li&gt;
&lt;li&gt;控制层&lt;/li&gt;
&lt;li&gt;应用模型层  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;lnmp-lamp架构&quot;&gt;&lt;a href=&quot;#lnmp-lamp架构&quot; class=&quot;headerlink&quot; title=&quot;lnmp/lamp架构&quot;&gt;&lt;/a&gt;lnmp/lamp架构&lt;/h2&gt;所谓lnmp架构无非就是linux+apache/nginx+PHP（前后台页面和业务逻辑）+ mysql数据库（读写分离）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;RPC架构&quot;&gt;&lt;a href=&quot;#RPC架构&quot; class=&quot;headerlink&quot; title=&quot;RPC架构&quot;&gt;&lt;/a&gt;RPC架构&lt;/h1&gt;&lt;h1 id=&quot;SOA架构&quot;&gt;&lt;a href=&quot;#SOA架构&quot; class=&quot;headerlink&quot; title=&quot;SOA架构&quot;&gt;&lt;/a&gt;SOA架构&lt;/h1&gt;&lt;h1 id=&quot;微服务架构&quot;&gt;&lt;a href=&quot;#微服务架构&quot; class=&quot;headerlink&quot; title=&quot;微服务架构&quot;&gt;&lt;/a&gt;微服务架构&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;传统垂直应用架构&quot;&gt;&lt;a href=&quot;#传统垂直应用架构&quot; class=&quot;headerlink&quot; title=&quot;传统垂直应用架构&quot;&gt;&lt;/a&gt;传统垂直应用架构&lt;/h1&gt;&lt;h2 id=&quot;MVC架构&quot;&gt;&lt;a href=&quot;#MVC架构&quot; class=&quot;headerlink&quot; title=&quot;MVC架构&quot;&gt;&lt;/a&gt;MVC架构&lt;/h2&gt;&lt;p&gt;mvc架构，即spring+Struts+iBatis/Hibernate+Tomcat&lt;br&gt;MVC架构通常分为三层：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;视图展示层：&lt;/li&gt;
&lt;li&gt;控制层&lt;/li&gt;
&lt;li&gt;应用模型层
    
    </summary>
    
      <category term="架构" scheme="https://iceziyao.github.io/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://iceziyao.github.io/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>基于hadoop的web日志分析</title>
    <link href="https://iceziyao.github.io/2016/10/28/hadoop/hadoopweb%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    <id>https://iceziyao.github.io/2016/10/28/hadoop/hadoopweb日志分析/</id>
    <published>2016-10-27T16:00:00.000Z</published>
    <updated>2016-11-23T23:10:04.828Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;企业中，web服务占有很大比重，同时web服务产生大量的日志，而这些日志中包含了很多有用信息。随着业务量的增长，日志的数量也会急剧增加，当日志只有GB单位时，在处理日志时还可以使用grep，sed，awk处理；当数据量上升到百GB以上时，shell脚本，以及python多线程的处理方式就显得有些力不从心。所以使用hadoop处理海量日志分析，是必然趋势。&lt;br&gt;本次是构建一个web日志的kpi分析系统，通过获取相应key值的分析，获取潜在消息&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;目录：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web日志分析概述&lt;/li&gt;
&lt;li&gt;需求分析：KPI指标设计&lt;/li&gt;
&lt;li&gt;算法模型：Hadoop并行算法&lt;/li&gt;
&lt;li&gt;架构设计：日志KPI系统架构&lt;/li&gt;
&lt;li&gt;程序开发  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Web日志分析概述&quot;&gt;&lt;a href=&quot;#Web日志分析概述&quot; class=&quot;headerlink&quot; title=&quot;Web日志分析概述&quot;&gt;&lt;/a&gt;Web日志分析概述&lt;/h1&gt;&lt;p&gt;Web日志由Web服务器产生，可能是Nginx, Apache, Tomcat等。从Web日志中，我们可以获取网站每类页面的PV值（PageView，页面访问量）、独立IP数；稍微复杂一些的，可以计算得出用户所检索的关键词排行榜、用户停留时间最高的页面等；更复杂的，构建广告点击模型、分析用户行为特征等等。&lt;br&gt;在Web日志中，每条日志通常代表着用户的一次访问行为&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;127.0.0.1 - - [19/Jul/2016:04:02:04 +0800] &amp;quot;GET /ss/bower/components/showdown/compressed/showdown.js HTTP/1.1&amp;quot; 304 0 &amp;quot;http://localhost/ss/&amp;quot; &amp;quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;web日志，拆解为以下10个变量:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;remote_addr: 记录客户端的ip地址, 127.0.0.1&lt;/li&gt;
&lt;li&gt;remote_user: 记录客户端用户名称, –&lt;/li&gt;
&lt;li&gt;time_local: 记录访问时间与时区, [19/Jul/2016:04:02:04 +0800]&lt;/li&gt;
&lt;li&gt;request_method: 记录请求的url与http协议, GET&lt;/li&gt;
&lt;li&gt;source: /ss/bower/components/showdown/compressed/showdown.js&lt;/li&gt;
&lt;li&gt;vesion: HTTP/1.1&lt;/li&gt;
&lt;li&gt;status: 记录请求状态,304&lt;/li&gt;
&lt;li&gt;body_bytes_sent: 记录发送给客户端文件主体内容大小, 19939&lt;/li&gt;
&lt;li&gt;http_referer: 用来记录从那个页面链接访问过来的, &lt;a href=&quot;http://localhost/ss/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost/ss/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;http_user_agent: 记录客户浏览器的相关信息, Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;需求分析：KPI指标设计&quot;&gt;&lt;a href=&quot;#需求分析：KPI指标设计&quot; class=&quot;headerlink&quot; title=&quot;需求分析：KPI指标设计&quot;&gt;&lt;/a&gt;需求分析：KPI指标设计&lt;/h1&gt;&lt;p&gt;KPI指标设计：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* PV(PageView): 网站文件访问统计
* IP: 独立IP的访问量统计
* Time: 网站分钟级请求数统计
* SIP：用户来源域名的统计   
* Browser: 用户的访问设备统计   
* Status：状态码分析
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;算法模型：Hadoop并行算法&quot;&gt;&lt;a href=&quot;#算法模型：Hadoop并行算法&quot; class=&quot;headerlink&quot; title=&quot;算法模型：Hadoop并行算法&quot;&gt;&lt;/a&gt;算法模型：Hadoop并行算法&lt;/h1&gt;&lt;p&gt;并行算法的设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PV(PageView): 网站文件访问统计&lt;ul&gt;
&lt;li&gt;Map过程{key:$source,value:1}&lt;/li&gt;
&lt;li&gt;Reduce过程{key:$source,value:求和(sum)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;IP: IP的访问量统计&lt;ul&gt;
&lt;li&gt;Map: {key:$remote_addr,value:$1}&lt;/li&gt;
&lt;li&gt;Reduce: {key:$remote_addr,value:求和(sum}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Time: 网站分钟级请求数统计&lt;ul&gt;
&lt;li&gt;Map: {key:$time_local,value:1}&lt;/li&gt;
&lt;li&gt;Reduce: {key:$time_local,value:求和(sum)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SIP: 用户来源域名的统计&lt;ul&gt;
&lt;li&gt;Map: {key:$http_referer,value:1}&lt;/li&gt;
&lt;li&gt;Reduce: {key:$http_referer,value:求和(sum)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Browser: 用户的访问设备统计&lt;ul&gt;
&lt;li&gt;Map: {key:$http_user_agent,value:1}&lt;/li&gt;
&lt;li&gt;Reduce: {key:$http_user_agent,value:求和(sum)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Status：状态码分析&lt;ul&gt;
&lt;li&gt;Map: {key:$status,value:1}&lt;/li&gt;
&lt;li&gt;Reduce: {key:$status,value:求和(sum)}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;架构设计：日志KPI系统架构&quot;&gt;&lt;a href=&quot;#架构设计：日志KPI系统架构&quot; class=&quot;headerlink&quot; title=&quot;架构设计：日志KPI系统架构&quot;&gt;&lt;/a&gt;架构设计：日志KPI系统架构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;日志集中保存&lt;/li&gt;
&lt;li&gt;设置系统定时器CRON，夜间在0点后，向HDFS导入昨天的日志文件。&lt;/li&gt;
&lt;li&gt;完成导入后，设置系统定时器，启动MapReduce程序，提取并计算统计指标。&lt;/li&gt;
&lt;li&gt;完成计算后，设置系统定时器，从HDFS导出统计指标数据到数据库，方便以后的即使查询。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;程序开发&quot;&gt;&lt;a href=&quot;#程序开发&quot; class=&quot;headerlink&quot; title=&quot;程序开发&quot;&gt;&lt;/a&gt;程序开发&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;集中日志  crontab&lt;/li&gt;
&lt;li&gt;MapReduce程序实现开发流程：&lt;ol&gt;
&lt;li&gt;对日志行的解析&lt;/li&gt;
&lt;li&gt;Map函数实现&lt;/li&gt;
&lt;li&gt;Reduce函数实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;日志集中&quot;&gt;&lt;a href=&quot;#日志集中&quot; class=&quot;headerlink&quot; title=&quot;日志集中&quot;&gt;&lt;/a&gt;日志集中&lt;/h2&gt;&lt;p&gt;crontab，内容如下：&lt;br&gt;&lt;code&gt;59 23 * * *  /usr/bin/python /hadoop/logserver/hdfsput.py &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import subprocess&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import datatime&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;webid=&amp;quot;****&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;currdate=datetime.datetime.now().strftime(&amp;apos;%Y%m%d&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logspath=&amp;quot;/data/logs/&amp;quot;+currdate+&amp;quot;/access.log&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logname=&amp;quot;access.log.&amp;quot;+webid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subprocess.Popen([&amp;quot;/usr/local/hadoop-1.2.1/bin/hadoop&amp;quot;, &amp;quot;dfs&amp;quot;, &amp;quot;-mkdir&amp;quot;, &amp;quot;hdfs://192.168.1.20:9000/user/root/website.com/&amp;quot;+currdate], stdout=subprocess.PIPE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;except Exception,e:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   pass&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;putinfo=subprocess.Popen([&amp;quot;/usr/local/hadoop-1.2.1/bin/hadoop&amp;quot;, &amp;quot;dfs&amp;quot;, &amp;quot;-put&amp;quot;, logspath, &amp;quot;hdfs://192.168.1.20:9000/user/root/website.com/&amp;quot;+currdate+&amp;quot;/&amp;quot;+logname], stdout=subprocess.PIPE)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for line in putinfo.stdout:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    print line&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;统计分析&quot;&gt;&lt;a href=&quot;#统计分析&quot; class=&quot;headerlink&quot; title=&quot;统计分析&quot;&gt;&lt;/a&gt;统计分析&lt;/h2&gt;&lt;p&gt;统计分析语言采用python，使用Mrjob框架编写Mapreduce。避免臃肿的代码量。  &lt;/p&gt;
&lt;h3 id=&quot;PV-PageView-网站文件访问统计&quot;&gt;&lt;a href=&quot;#PV-PageView-网站文件访问统计&quot; class=&quot;headerlink&quot; title=&quot;PV(PageView): 网站文件访问统计&quot;&gt;&lt;/a&gt;PV(PageView): 网站文件访问统计&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	i=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for url in line.split():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    if i==6:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            	yield url, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    i+=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, url, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield url, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;IP-独立IP的访问量统计&quot;&gt;&lt;a href=&quot;#IP-独立IP的访问量统计&quot; class=&quot;headerlink&quot; title=&quot;IP: 独立IP的访问量统计&quot;&gt;&lt;/a&gt;IP: 独立IP的访问量统计&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;IP_RE = re.compile(r&amp;quot;\d&amp;#123;1,3&amp;#125;\.\d&amp;#123;1,3&amp;#125;\.\d&amp;#123;1,3&amp;#125;\.\d&amp;#123;1,3&amp;#125;&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for ip in IP_RE.findall(line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            yield ip, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, ip, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield ip, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Time-网站分钟级请求数统计&quot;&gt;&lt;a href=&quot;#Time-网站分钟级请求数统计&quot; class=&quot;headerlink&quot; title=&quot;Time: 网站分钟级请求数统计&quot;&gt;&lt;/a&gt;Time: 网站分钟级请求数统计&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	i=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for dt in line.split():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    if i==3:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		timerow=dt.split(&amp;quot;:&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		hm=timerow[1]+&amp;quot;:&amp;quot;+timerow[2]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            	yield hm, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    i+=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, key, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield key, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;SIP：用户来源域名的统计&quot;&gt;&lt;a href=&quot;#SIP：用户来源域名的统计&quot; class=&quot;headerlink&quot; title=&quot;SIP：用户来源域名的统计&quot;&gt;&lt;/a&gt;SIP：用户来源域名的统计&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	i=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for dt in line.split():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    if i==11:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		timerow=dt.split(&amp;quot;:&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield sip, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    i+=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, key, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield key, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Browser-用户的访问设备统计&quot;&gt;&lt;a href=&quot;#Browser-用户的访问设备统计&quot; class=&quot;headerlink&quot; title=&quot;Browser: 用户的访问设备统计&quot;&gt;&lt;/a&gt;Browser: 用户的访问设备统计&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	i=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for dt in line.split():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    if i==12:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		timerow=dt.split(&amp;quot;:&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield browser , 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    i+=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, key, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield key, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Status：状态码分析&quot;&gt;&lt;a href=&quot;#Status：状态码分析&quot; class=&quot;headerlink&quot; title=&quot;Status：状态码分析&quot;&gt;&lt;/a&gt;Status：状态码分析&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import re&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class MRCounter(MRJob):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def mapper(self, key, line):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	i=0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        for httpcode in line.split():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    if i==8 and re.match(r&amp;quot;\d&amp;#123;1,3&amp;#125;&amp;quot;,httpcode):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            	yield httpcode, 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    i+=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer(self, httpcode, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        yield httpcode, sum(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def reducer_sorted(self, httpcode, occurrences):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	yield httpcode, sorted(occurrences)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def steps(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return [self.mr(mapper=self.mapper),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                self.mr(reducer=self.reducer)]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    MRCounter.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;未完待续  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;企业中，web服务占有很大比重，同时web服务产生大量的日志，而这些日志中包含了很多有用信息。随着业务量的增长，日志的数量也会急剧增加，当日志只有GB单位时，在处理日志时还可以使用grep，sed，awk处理；当数据量上升到百GB以上时，shell脚本，以及python多线程的处理方式就显得有些力不从心。所以使用hadoop处理海量日志分析，是必然趋势。&lt;br&gt;本次是构建一个web日志的kpi分析系统，通过获取相应key值的分析，获取潜在消息&lt;br&gt;
    
    </summary>
    
      <category term="hadoop" scheme="https://iceziyao.github.io/categories/hadoop/"/>
    
    
      <category term="python" scheme="https://iceziyao.github.io/tags/python/"/>
    
      <category term="hadoop" scheme="https://iceziyao.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>hadoop的安装与使用</title>
    <link href="https://iceziyao.github.io/2016/10/13/hadoop/hadoop%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://iceziyao.github.io/2016/10/13/hadoop/hadoop安装与使用/</id>
    <published>2016-10-12T16:00:00.000Z</published>
    <updated>2016-11-23T21:33:10.663Z</updated>
    
    <content type="html">&lt;h1 id=&quot;未完成&quot;&gt;&lt;a href=&quot;#未完成&quot; class=&quot;headerlink&quot; title=&quot;未完成&quot;&gt;&lt;/a&gt;未完成&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;未完成&quot;&gt;&lt;a href=&quot;#未完成&quot; class=&quot;headerlink&quot; title=&quot;未完成&quot;&gt;&lt;/a&gt;未完成&lt;/h1&gt;
    
    </summary>
    
      <category term="hadoop" scheme="https://iceziyao.github.io/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="https://iceziyao.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>初识hadoop</title>
    <link href="https://iceziyao.github.io/2016/10/09/hadoop/%E5%88%9D%E8%AF%86hadoop/"/>
    <id>https://iceziyao.github.io/2016/10/09/hadoop/初识hadoop/</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-11-23T23:10:13.050Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Hadoop历史&quot;&gt;&lt;a href=&quot;#Hadoop历史&quot; class=&quot;headerlink&quot; title=&quot;Hadoop历史&quot;&gt;&lt;/a&gt;Hadoop历史&lt;/h1&gt;&lt;p&gt;雏形开始于2002年的Apache的Nutch，Nutch是一个开源Java 实现的搜索引擎。它提供了我们运行自己的搜索引擎所需的全部工具。包括全文搜索和Web爬虫。&lt;br&gt;随后在2003年Google发表了一篇技术学术论文谷歌文件系统（GFS）。GFS也就是google File System，google公司为了存储海量搜索数据而设计的专用文件系统。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;2004年Nutch创始人Doug Cutting基于Google的GFS论文实现了分布式文件存储系统名为NDFS。&lt;br&gt;2004年Google又发表了一篇技术学术论文MapReduce。MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行分析运算。&lt;br&gt;2005年Doug Cutting又基于MapReduce，在Nutch搜索引擎实现了该功能。&lt;br&gt;2006年，Yahoo雇用了Doug Cutting，Doug Cutting将NDFS和MapReduce升级命名为Hadoop，Yahoo开建了一个独立的团队给Goug Cutting专门研究发展Hadoop。&lt;br&gt;不得不说Google和Yahoo对Hadoop的贡献功不可没。  &lt;/p&gt;
&lt;h1 id=&quot;Hadoop核心&quot;&gt;&lt;a href=&quot;#Hadoop核心&quot; class=&quot;headerlink&quot; title=&quot;Hadoop核心&quot;&gt;&lt;/a&gt;Hadoop核心&lt;/h1&gt;&lt;p&gt;Hadoop的核心就是HDFS和MapReduce，而两者只是理论基础，不是具体可使用的高级应用，Hadoop旗下有很多经典子项目，比如HBase、Hive等，这些都是基于HDFS和MapReduce发展出来的。要想了解Hadoop，就必须知道HDFS和MapReduce是什么。&lt;/p&gt;
&lt;h2 id=&quot;HDFS&quot;&gt;&lt;a href=&quot;#HDFS&quot; class=&quot;headerlink&quot; title=&quot;HDFS&quot;&gt;&lt;/a&gt;HDFS&lt;/h2&gt;&lt;p&gt;HDFS（Hadoop Distributed File System，Hadoop分布式文件系统），它是一个高度容错性的系统，适合部署在廉价的机器上。HDFS能提供高吞吐量的数据访问，适合那些有着超大数据集（large data set）的应用程序。&lt;/p&gt;
&lt;p&gt;HDFS的设计特点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大数据文件，非常适合上T级别的大文件或者一堆大数据文件的存储，如果文件只有几个G甚至更小就没啥意思了。&lt;/li&gt;
&lt;li&gt;文件分块存储，HDFS会将一个完整的大文件平均分块存储到不同计算器上，它的意义在于读取文件时可以同时从多个主机取不同区块的文件，多主机读取比单主机读取效率要高得多得都。&lt;/li&gt;
&lt;li&gt;流式数据访问，一次写入多次读写，这种模式跟传统文件不同，它不支持动态改变文件内容，而是要求让文件一次写入就不做变化，要变化也只能在文件末添加内容。&lt;/li&gt;
&lt;li&gt;廉价硬件，HDFS可以应用在普通PC机上，这种机制能够让给一些公司用几十台廉价的计算机就可以撑起一个大数据集群。&lt;/li&gt;
&lt;li&gt;硬件故障，HDFS认为所有计算机都可能会出问题，为了防止某个主机失效读取不到该主机的块文件，它将同一个文件块副本分配到其它某几个主机上，如果其中一台主机失效，可以迅速找另一块副本取文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HDFS的关键元素：&lt;br&gt;Block：将一个文件进行分块，通常是64M。&lt;br&gt;NameNode：保存整个文件系统的目录信息、文件信息及分块信息，这是由唯一一台主机专门保存，当然这台主机如果出错，NameNode就失效了。在Hadoop2.*开始支持activity-standy模式—-如果主NameNode失效，启动备用主机运行NameNode。&lt;br&gt;DataNode：分布在廉价的计算机上，用于存储Block块文件。&lt;/p&gt;
&lt;h2 id=&quot;MapReduce&quot;&gt;&lt;a href=&quot;#MapReduce&quot; class=&quot;headerlink&quot; title=&quot;MapReduce&quot;&gt;&lt;/a&gt;MapReduce&lt;/h2&gt;&lt;p&gt;通俗说MapReduce是一套从海量·源数据提取分析元素最后返回结果集的编程模型，将文件分布式存储到硬盘是第一步，而从海量数据中提取分析我们需要的内容就是MapReduce做的事了。&lt;/p&gt;
&lt;p&gt;下面以一个计算海量数据最大值为例：12306需要统计每天访问量最多的ip，按照传统的计算方式，我们会这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;awk&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果计算的数组长度少的话，这样实现是不会有问题的，还是面对海量数据的时候就会有问题。&lt;br&gt;MapReduce会这样做：首先数字是分布存储在不同块中的，以某几个块为一个Map，计算出Map中最大的值，然后将每个Map中的最大值做Reduce操作，Reduce再取最大值给用户。&lt;/p&gt;
&lt;p&gt;MapReduce的基本原理就是：将大的数据分析分成小块逐个分析，最后再将提取出来的数据汇总分析，最终获得我们想要的内容。当然怎么分块分析，怎么做Reduce操作非常复杂，Hadoop已经提供了数据分析的实现，我们只需要编写简单的需求命令即可达成我们想要的数据。&lt;/p&gt;
&lt;h1 id=&quot;Hadoop架构&quot;&gt;&lt;a href=&quot;#Hadoop架构&quot; class=&quot;headerlink&quot; title=&quot;Hadoop架构&quot;&gt;&lt;/a&gt;Hadoop架构&lt;/h1&gt;&lt;p&gt;Hadoop使用主/从（Master/Slave）架构，主要角色有NameNode，DataNode，secondary NameNode，JobTracker，TaskTracker组成。  &lt;/p&gt;
&lt;p&gt;其中NameNode，secondary NameNode，JobTracker运行在Master节点上，DataNode和TaskTracker运行在Slave节点上。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;NameNode&lt;br&gt;NameNode是HDFS的守护程序，负责记录文件是如何分割成数据块的，以及这些数据块被存储到哪些数据节点上。它的功能是对内存及I/O进行集中管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DataNode&lt;br&gt;集群中每个从服务器都运行一个DataNode后台程序，后台程序负责把HDFS数据块读写到本地文件系统。需要读写数据时，由NameNode告诉客户端去哪个DataNode进行具体的读写操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Secondary NameNode&lt;br&gt;Secondary NameNode是一个用来监控HDFS状态的辅助后台程序，如果NameNode发生问题，可以使用Secondary NameNode作为备用的NameNode。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JobTracker&lt;br&gt;JobTracker后台程序用来连接应用程序与Hadoop，用户应用提交到集群后，由JobTracker决定哪个文件处理哪个task执行，一旦某个task失败，JobTracker会自动开启这个task。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TaskTracker&lt;br&gt;TaskTracker负责存储数据的DataNode相结合，位于从节点，负责各自的task。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hadoop历史&quot;&gt;&lt;a href=&quot;#Hadoop历史&quot; class=&quot;headerlink&quot; title=&quot;Hadoop历史&quot;&gt;&lt;/a&gt;Hadoop历史&lt;/h1&gt;&lt;p&gt;雏形开始于2002年的Apache的Nutch，Nutch是一个开源Java 实现的搜索引擎。它提供了我们运行自己的搜索引擎所需的全部工具。包括全文搜索和Web爬虫。&lt;br&gt;随后在2003年Google发表了一篇技术学术论文谷歌文件系统（GFS）。GFS也就是google File System，google公司为了存储海量搜索数据而设计的专用文件系统。&lt;br&gt;
    
    </summary>
    
      <category term="hadoop" scheme="https://iceziyao.github.io/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="https://iceziyao.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>基于Tornado的ansible的二次封装</title>
    <link href="https://iceziyao.github.io/2016/07/07/Auto/ans-api/"/>
    <id>https://iceziyao.github.io/2016/07/07/Auto/ans-api/</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2016-09-13T22:12:35.340Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Tornado&quot;&gt;&lt;a href=&quot;#Tornado&quot; class=&quot;headerlink&quot; title=&quot;Tornado&quot;&gt;&lt;/a&gt;Tornado&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;FriendFeed使用了一款使用 Python 编写的，相对简单的 非阻塞式 Web 服务器。其应用程序使用的 Web 框架看起来有些像 web.py 或者 Google 的 webapp， 不过为了能有效利用非阻塞式服务器环境，这个 Web 框架还包含了一些相关的有用工具 和优化。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;Tornado 就是我们在 FriendFeed 的 Web 服务器及其常用工具的开源版本。Tornado 和现在的主流 Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。得利于其 非阻塞的方式和对 epoll 的运用，Tornado 每秒可以处理数以千计的连接，因此 Tornado 是实时 Web 服务的一个 理想框架。我们开发这个 Web 服务器的主要目的就是为了处理 FriendFeed 的实时功能 ——在 FriendFeed 的应用里每一个活动用户都会保持着一个服务器连接。&lt;/p&gt;
&lt;h3 id=&quot;简单示例&quot;&gt;&lt;a href=&quot;#简单示例&quot; class=&quot;headerlink&quot; title=&quot;简单示例&quot;&gt;&lt;/a&gt;简单示例&lt;/h3&gt;&lt;p&gt;以下是经典的 “Hello, world” 示例：&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tornado.ioloop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tornado.web&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.write(&lt;span class=&quot;string&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;application = tornado.web.Application([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;string&quot;&gt;r&quot;/&quot;&lt;/span&gt;, MainHandler),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    application.listen(&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tornado.ioloop.IOLoop.instance().start()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载与安装&quot;&gt;&lt;a href=&quot;#下载与安装&quot; class=&quot;headerlink&quot; title=&quot;下载与安装&quot;&gt;&lt;/a&gt;下载与安装&lt;/h3&gt;&lt;h4 id=&quot;自动安装&quot;&gt;&lt;a href=&quot;#自动安装&quot; class=&quot;headerlink&quot; title=&quot;自动安装&quot;&gt;&lt;/a&gt;自动安装&lt;/h4&gt;&lt;p&gt; Tornado 已经列入 PyPI ，因此可以通过 pip 或者 easy_install 来安装。如果你没有安装 libcurl 的话，你需要将其单独安装到系统中。&lt;/p&gt;
&lt;h4 id=&quot;手动安装&quot;&gt;&lt;a href=&quot;#手动安装&quot; class=&quot;headerlink&quot; title=&quot;手动安装&quot;&gt;&lt;/a&gt;手动安装&lt;/h4&gt;&lt;p&gt;安装包 &lt;a href=&quot;http://github.com/downloads/facebook/tornado/tornado-2.0.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载 tornado-2.0.tar.gz&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar xvzf tornado-2.0.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd tornado-2.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python setup.py build&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo python setup.py install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##开发历程  &lt;/p&gt;
&lt;h3 id=&quot;简单实例&quot;&gt;&lt;a href=&quot;#简单实例&quot; class=&quot;headerlink&quot; title=&quot;简单实例&quot;&gt;&lt;/a&gt;简单实例&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tornado.ioloop&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; tornado.options &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; define, options&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; tornado.web&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ansible.runner&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ansible.inventory &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Inventory&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; simplejson&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; hashlib&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;define(&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;, default=&lt;span class=&quot;string&quot;&gt;&#39;d41d8cd98f00b204e9800998ecf8427e&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 加密/解谜&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getmd5&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(str)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      m = hashlib.md5()   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      m.update(str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; m.hexdigest()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MainHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.write(&lt;span class=&quot;string&quot;&gt;&quot;Hello, world&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    通过继承tornado.web.RequestHandler&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    改写post/get方法，获取json数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&#39;&#39;&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data = simplejson.loads(self.request.body)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        badcmd = [&lt;span class=&quot;string&quot;&gt;&#39;reboot&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;rm&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;kill&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;pkill&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;shutdown&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;half&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mv&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;dd&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mkfs&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wget&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        type = data[&lt;span class=&quot;string&quot;&gt;&#39;type&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmd = data[&lt;span class=&quot;string&quot;&gt;&#39;cmd&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host = data[&lt;span class=&quot;string&quot;&gt;&#39;host&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        token = data[&lt;span class=&quot;string&quot;&gt;&#39;token&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmdinfo = cmd.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; type,host,options.key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        hotkey = type+host+options.key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; hotkey&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        result = getmd5(hotkey)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; result&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sign != result:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.write(&lt;span class=&quot;string&quot;&gt;&quot;Sign is Error&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cmdinfo[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; badcmd:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.write(&lt;span class=&quot;string&quot;&gt;&quot;This is Danger Shell&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            runner = ansible.runner.Runner(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               module_name=type,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               module_args=cmd,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               pattern=host,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;               forks=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            datastructure = runner.run()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.write(datastructure)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GetGroupHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      i = Inventory()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      groups = i.list_groups()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      self.write(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;.join(groups))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;application = tornado.web.Application([&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;string&quot;&gt;r&quot;/&quot;&lt;/span&gt;, MainHandler),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;string&quot;&gt;r&quot;/command&quot;&lt;/span&gt;, CommandHandler),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (&lt;span class=&quot;string&quot;&gt;r&quot;/getgroup&quot;&lt;/span&gt;, GetGroupHandler),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    application.listen(&lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tornado.ioloop.IOLoop.instance().start()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面实例，通过继承tornado.web.RequestHandler来得到 json数据，然后根据数据中的元素执行相应命令&lt;br&gt;然后调用 ansible的api接口，执行相应的命令。&lt;br&gt;这样，我们有一个思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户认证，得到许可，拿到，server端返回token值&lt;/li&gt;
&lt;li&gt;客户端得到token值，以token作为认证，进行命令传递&lt;/li&gt;
&lt;li&gt;server端通过后，把执行结果以json回传&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户登陆&quot;&gt;&lt;a href=&quot;#用户登陆&quot; class=&quot;headerlink&quot; title=&quot;用户登陆&quot;&gt;&lt;/a&gt;用户登陆&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;user = ansible&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;passwold = ansible&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;post&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        creds = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;: self.get_arguments(&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;: self.get_arguments(&lt;span class=&quot;string&quot;&gt;&#39;password&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;eauth&#39;&lt;/span&gt;: self.get_arguments(&lt;span class=&quot;string&quot;&gt;&#39;eauth&#39;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        token = self.application.auth.mk_token(creds)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;token&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; token:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; nicer error message&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            self.send_error(&lt;span class=&quot;number&quot;&gt;401&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ret = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;return&#39;&lt;/span&gt;: [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;token&#39;&lt;/span&gt;: token[&lt;span class=&quot;string&quot;&gt;&#39;token&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;expire&#39;&lt;/span&gt;: token[&lt;span class=&quot;string&quot;&gt;&#39;expire&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;start&#39;&lt;/span&gt;: token[&lt;span class=&quot;string&quot;&gt;&#39;start&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;: token[&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;eauth&#39;&lt;/span&gt;: token[&lt;span class=&quot;string&quot;&gt;&#39;eauth&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;string&quot;&gt;&#39;perms&#39;&lt;/span&gt;: perms,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;]&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.write(self.serialize(ret))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.finish()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;添加 https 认证&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;server = HTTPServer(application,ssl_options=&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&quot;certfile&quot;&lt;/span&gt;: os.path.join(os.path.abspath(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;server.crt&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&quot;keyfile&quot;&lt;/span&gt;: os.path.join(os.path.abspath(&lt;span class=&quot;string&quot;&gt;&quot;.&quot;&lt;/span&gt;), &lt;span class=&quot;string&quot;&gt;&quot;server.key&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后把相关的证书扔到 py 文件的目录下。改成相应的名字。  &lt;/p&gt;
&lt;h3 id=&quot;消息传递&quot;&gt;&lt;a href=&quot;#消息传递&quot; class=&quot;headerlink&quot; title=&quot;消息传递&quot;&gt;&lt;/a&gt;消息传递&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Ansible-API&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CommandHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(tornado.web.RequestHandler)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        data = simplejson.loads(self.request.body)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        types = data[&lt;span class=&quot;string&quot;&gt;&#39;fun&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmd = data[&lt;span class=&quot;string&quot;&gt;&#39;cmd&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host = data[&lt;span class=&quot;string&quot;&gt;&#39;host&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        token = data[&lt;span class=&quot;string&quot;&gt;&#39;token&#39;&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cmdinfo = cmd.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        监测token 省略，也就是所谓的用户认证，只做介绍&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &#39;&#39;&#39;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ruselt = Ansible-API.run(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;fun&#39;&lt;/span&gt;: types,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cmd&#39;&lt;/span&gt; : cmd,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;tgt&#39;&lt;/span&gt;: host，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;arg&#39;&lt;/span&gt;: cmdinfo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ret = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;return&#39;&lt;/span&gt;:[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    ruselt[&lt;span class=&quot;string&quot;&gt;&#39;state&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.write(self.serialize(ret))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        self.finish()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ansible二次封装&quot;&gt;&lt;a href=&quot;#ansible二次封装&quot; class=&quot;headerlink&quot; title=&quot;ansible二次封装&quot;&gt;&lt;/a&gt;ansible二次封装&lt;/h3&gt;&lt;p&gt;后续待开发,也就是把常用的模块封装起来&lt;br&gt;最简单的&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ansible.runner  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ansible&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;API&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(data)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        runner = ansible.runner.Runner(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            module_name=data[&lt;span class=&quot;string&quot;&gt;&#39;fun&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            module_args=data[&lt;span class=&quot;string&quot;&gt;&#39;cmd&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            pattern=data[&lt;span class=&quot;string&quot;&gt;&#39;tgt&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            forks=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; runner&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;p&gt;把ansible用 Tornado加以修饰，也是为了自己的自动化运维平台更好的兼容ansible，也为了可以将web服务与ansible分离。&lt;br&gt;而且封装后，会使其它语言调用无障碍。ansible 会使运用一些危险的命令，我们可以在 server端进行控制&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Tornado&quot;&gt;&lt;a href=&quot;#Tornado&quot; class=&quot;headerlink&quot; title=&quot;Tornado&quot;&gt;&lt;/a&gt;Tornado&lt;/h2&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;FriendFeed使用了一款使用 Python 编写的，相对简单的 非阻塞式 Web 服务器。其应用程序使用的 Web 框架看起来有些像 web.py 或者 Google 的 webapp， 不过为了能有效利用非阻塞式服务器环境，这个 Web 框架还包含了一些相关的有用工具 和优化。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://iceziyao.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="自动化运维" scheme="https://iceziyao.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
      <category term="ansible" scheme="https://iceziyao.github.io/tags/ansible/"/>
    
      <category term="python" scheme="https://iceziyao.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ansible的二次开发</title>
    <link href="https://iceziyao.github.io/2016/07/01/Auto/ansible-api/"/>
    <id>https://iceziyao.github.io/2016/07/01/Auto/ansible-api/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2016-08-08T23:21:27.048Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ansible-api&quot;&gt;&lt;a href=&quot;#ansible-api&quot; class=&quot;headerlink&quot; title=&quot;ansible api&quot;&gt;&lt;/a&gt;ansible api&lt;/h2&gt;&lt;p&gt;ansible是个好东西,但好的东西也要来折腾下，最近看了看ansible的api，于是就探究了下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;简单实例&quot;&gt;&lt;a href=&quot;#简单实例&quot; class=&quot;headerlink&quot; title=&quot;简单实例&quot;&gt;&lt;/a&gt;简单实例&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import ansible.runner&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fun = ansible.runner.Runner(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        module_name = &#39;shell&#39;,        #调用shell模块，这个代码是为了示例执行shell命令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        module_args = &#39;hostname&#39;,     #shell命令&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host_list = &#39;aa.py&#39;,          #host文件路径，我这调用的是dynamic inventory脚本，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pattern = &#39;AA&#39;,               #host组名，需要执行shell命令的ip组，AA是在上面aa.py中定义的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        )                             #其它没写的参数，都为是系统默认的&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ruselt = fun.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Runner类详解&quot;&gt;&lt;a href=&quot;#Runner类详解&quot; class=&quot;headerlink&quot; title=&quot;Runner类详解&quot;&gt;&lt;/a&gt;Runner类详解&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Runner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39; core API interface to ansible &#39;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# see bin/ansible for how this is used...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self,&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        host_list=C.DEFAULT_HOST_LIST,      这里不仅可以放 静态的hosts文件，也可以放 inventory的脚本，脚本要&lt;span class=&quot;number&quot;&gt;777&lt;/span&gt;权限。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        module_path=None,               这个是ansible的路径，一般不用写&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        module_name=C.DEFAULT_MODULE_NAME,      模块的名字，模块的位置要选定在/usr/share/absible下，不然会识别不到。   要注意下～&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        module_args=C.DEFAULT_MODULE_ARGS,  # ex: &lt;span class=&quot;string&quot;&gt;&quot;src=/tmp/a dest=/tmp/b&quot;&lt;/span&gt;   模块的参数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        forks=C.DEFAULT_FORKS,              # parallelism level   进程的数目，他的逻辑是这样，你如果填入了&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;个进程，他会判断你的list_hosts是否有&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;个，没有的话，他就会根据主机的数目来派生进程，如果超过&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;个，那就用multiprocess进程池pool来调度。mulitiprocess本身有个isalive的东西，来判断分离出去进程的存活状态。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        timeout=C.DEFAULT_TIMEOUT,       这个就是超时的时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pattern=C.DEFAULT_PATTERN,          # which hosts?  ex: &lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;acme.example.org&#39;&lt;/span&gt;   这个是做相关的匹配，是关于inventory的匹配&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        remote_user=C.DEFAULT_REMOTE_USER,  # ex: &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;  远端用户的选择&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        remote_pass=C.DEFAULT_REMOTE_PASS,  # ex: &lt;span class=&quot;string&quot;&gt;&#39;password123&#39;&lt;/span&gt; or None if using key 远端密码的选择&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        remote_port=None,                   # if SSH on different ports   远端端口的选择&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        private_key_file=C.DEFAULT_PRIVATE_KEY_FILE, # if not using keys/passwords  还可以用指定key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sudo_pass=C.DEFAULT_SUDO_PASS,      # ex: &lt;span class=&quot;string&quot;&gt;&#39;password123&#39;&lt;/span&gt; or None   sudo之后的密码的推送&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        background=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                       # async poll every X seconds, else &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; for non-async  看字眼就知道他是做什么的了，他非常的像 saltstack的 event, 当派生出了一个任务后，&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        产生一个ansible_job_id,然后时不时的去拿数据&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        transport=C.DEFAULT_TRANSPORT,      # &lt;span class=&quot;string&quot;&gt;&#39;ssh&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;paramiko&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;local&#39;&lt;/span&gt;  这里是选择你的链接得到方式，默认是用的 paramiko&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        conditional=&lt;span class=&quot;string&quot;&gt;&#39;True&#39;&lt;/span&gt;,                 # run only if this fact expression evals to true     这个是什么呢？  相当与 puppet saltstack 里面的require,状态的判断。  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        callbacks=None,                     # used for output  回调的输出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sudo=False,                         # whether to run sudo or not 是否是sudo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sudo_user=C.DEFAULT_SUDO_USER,      # ex: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;  sudo的时候，用到的用户名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ):              &lt;span class=&quot;comment&quot;&gt;# 参数结束&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            实现&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;ansible-playbook-api&quot;&gt;&lt;a href=&quot;#ansible-playbook-api&quot; class=&quot;headerlink&quot; title=&quot;ansible_playbook api&quot;&gt;&lt;/a&gt;ansible_playbook api&lt;/h3&gt;&lt;p&gt;ansible_playbook api 部分在官方文档上并没有提，不过通过查看ansible模块的帮助信息可以看到其是支持的。&lt;/p&gt;
&lt;h4 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ansible.playbook&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ansible &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; callbacks&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; ansible &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;stats = callbacks.AggregateStats()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;playbook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;runner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pb = ansible.playbook.PlayBook(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    playbook=&lt;span class=&quot;string&quot;&gt;&quot;nseries.yml&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    stats=stats,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    callbacks=playbook_cb,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    runner_callbacks=runner_cb,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    check=&lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (play_ds, play_basedir) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; zip(pb.playbook, pb.play_basedirs):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ipdb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ipdb.set_trace()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Can play around here to see what&#39;s going on.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pb.run()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;注意&quot;&gt;&lt;a href=&quot;#注意&quot; class=&quot;headerlink&quot; title=&quot;注意&quot;&gt;&lt;/a&gt;注意&lt;/h4&gt;&lt;p&gt;在用api的方式执行playbook的时候，playbook，stats，callbacks，runner_callbacks这几个参数是必须的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行流程&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;arguments = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if playbook is None:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arguments.append(&#39;playbook&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if callbacks is None:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arguments.append(&#39;callbacks&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if runner_callbacks is None:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arguments.append(&#39;runner_callbacks&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if stats is None:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    arguments.append(&#39;stats&#39;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if arguments:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    raise Exception(&#39;PlayBook missing required arguments: %s&#39; % &#39;, &#39;.join(arguments))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;playbook用来指定playbook的yaml文件&lt;br&gt;stats用来收集playbook执行期间的状态信息，最后会进行汇总&lt;br&gt;callbacks用来输出playbook执行的结果&lt;br&gt;runner_callbacks用来输出playbook执行期间的结果。但是它返回的结果太简单，我想让它详细点，如果用自定义callback的方法插入到mongo里面的话也行，或者是直接输出，但是我想所有task都执行完后，把每个task的详细信息输出到终端上，最后发现结果输出都是靠callbacks.py里的AggregateStats这个类，在每执行完一个task后，都会调用AggregateStats进行计算，汇总。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当需要先对前一次作任务执行的结果进行处理，并将相应的结果对应的作为输入再在一次任务传入时，这里使用api 更方便；&lt;/li&gt;
&lt;li&gt;需要对结果输出进行整形时，也比较api 方便；&lt;/li&gt;
&lt;li&gt;playbook 之间进行调用或都playbook比较复杂时，想要理清任务之间的关系势必累显麻烦，而通过api，从上一层任务到下一层任务之间的调用关系明子。而且playbook之间可以是平行的关系。方便小的功能模块的复用。&lt;/li&gt;
&lt;li&gt;方便二次开发及和其他程序之间的耦合调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;后续会进行基于Tornado的ansible的二次封装&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ansible-api&quot;&gt;&lt;a href=&quot;#ansible-api&quot; class=&quot;headerlink&quot; title=&quot;ansible api&quot;&gt;&lt;/a&gt;ansible api&lt;/h2&gt;&lt;p&gt;ansible是个好东西,但好的东西也要来折腾下，最近看了看ansible的api，于是就探究了下&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://iceziyao.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="自动化运维" scheme="https://iceziyao.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
      <category term="ansible" scheme="https://iceziyao.github.io/tags/ansible/"/>
    
      <category term="python" scheme="https://iceziyao.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SaltApi安装使用</title>
    <link href="https://iceziyao.github.io/2016/06/28/Auto/salt-api/"/>
    <id>https://iceziyao.github.io/2016/06/28/Auto/salt-api/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-08-11T16:46:31.215Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Salt-API安装配置及使用&quot;&gt;&lt;a href=&quot;#Salt-API安装配置及使用&quot; class=&quot;headerlink&quot; title=&quot;Salt-API安装配置及使用&quot;&gt;&lt;/a&gt;Salt-API安装配置及使用&lt;/h2&gt;&lt;p&gt;SaltStack 官方提供有REST API格式的 salt-api 项目，将使Salt与第三方系统集成变得尤为简单。本文讲带你了解如何安装配置Salt-API, 如何利用Salt-API获取想要的信息。&lt;br&gt;具体使用请参考:&lt;a href=&quot;http://salt-api.readthedocs.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;salt-api手册&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;操作系统环境: CentOS 6.4/ Centos 7&lt;/li&gt;
&lt;li&gt;Salt Master/Minion版本: 0.17.2, Master IP地址为172.25.254.135, 用于本次测试的Minion ID为 minion.example.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;实施&quot;&gt;&lt;a href=&quot;#实施&quot; class=&quot;headerlink&quot; title=&quot;实施&quot;&gt;&lt;/a&gt;实施&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;7系列&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest-1.el7.noarch.rpm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install salt-master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;6系列&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;安装salt-api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;pip install salt-api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 下载服务维护脚本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;wget https://raw.github.com/saltstack/salt-api/develop/pkg/rpm/salt-api -O /etc/init.d/salt-api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chmod +x /etc/init.d/salt-api&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;chkconfig salt-api on&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;配置Salt-API&quot;&gt;&lt;a href=&quot;#配置Salt-API&quot; class=&quot;headerlink&quot; title=&quot;配置Salt-API&quot;&gt;&lt;/a&gt;配置Salt-API&lt;/h3&gt;&lt;h4 id=&quot;生成自签名证书-用于ssl&quot;&gt;&lt;a href=&quot;#生成自签名证书-用于ssl&quot; class=&quot;headerlink&quot; title=&quot;生成自签名证书(用于ssl)&quot;&gt;&lt;/a&gt;生成自签名证书(用于ssl)&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd  /etc/pki/tls/certs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 生成自签名证书, 过程中需要输入key密码及RDNs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;make testcert&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd /etc/pki/tls/private/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 解密key文件，生成无密码的key文件, 过程中需要输入key密码，该密码为之前生成证书时设置的密码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;openssl rsa -in localhost.key -out salt_nopass.key&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Salt-API配置&quot;&gt;&lt;a href=&quot;#Salt-API配置&quot; class=&quot;headerlink&quot; title=&quot;Salt-API配置&quot;&gt;&lt;/a&gt;Salt-API配置&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建用于salt-api的用户  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;useradd -M -s /sbin/nologin salt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;salt&amp;quot; | passwd salt —stdin&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置eauth, /etc/salt/master.d/eauth.conf  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;external_auth:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  pam:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    salt:           #此处的用户与上述创建的用户一致&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      - .*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      - &#39;@wheel&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      - &#39;@runner&#39;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置Salt-API, /etc/salt/master.d/api.conf&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rest_cherrypy:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  port: 8000        #开放端口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ssl_crt: /etc/pki/tls/certs/localhost.crt     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ssl_key: /etc/pki/tls/private/salt_nopass.key&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;启动Salt-API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;service salt-api start&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Salt-API使用&quot;&gt;&lt;a href=&quot;#Salt-API使用&quot; class=&quot;headerlink&quot; title=&quot;Salt-API使用&quot;&gt;&lt;/a&gt;Salt-API使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用自带的curl&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Login&quot;&gt;&lt;a href=&quot;#Login&quot; class=&quot;headerlink&quot; title=&quot;Login&quot;&gt;&lt;/a&gt;Login&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;请求&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -k https://172.25.254.135:8000/login -H &amp;quot;Accept: application/x-yaml&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d username=&amp;apos;salt&amp;apos; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d password=&amp;apos;salt&amp;apos; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d eauth=&amp;apos;pam&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;返回&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- eauth: pam&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  expire: 1470786521.466763&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  perms:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - .*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - &amp;apos;@wheel&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  - &amp;apos;@runner&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  start: 1470743321.466762&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  token: f59484ca66f52173fb34742fc014f7dc5b027bdd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  user: salt&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 token 后边的串为认证成功后获取的token串，之后可以不用再次输入密码，直接使用本Token即可&lt;/p&gt;
&lt;h4 id=&quot;查询Minion的信息&quot;&gt;&lt;a href=&quot;#查询Minion的信息&quot; class=&quot;headerlink&quot; title=&quot;查询Minion的信息&quot;&gt;&lt;/a&gt;查询Minion的信息&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -k https://172.25.254.135:8000/minions/minion.example.com \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;Accept: application/x-yaml&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;X-Auth-Token: f59484ca66f52173fb34742fc014f7dc5b027bdd&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 X-Auth-Token 后边的串为之前Login获取到的Token串, 如果请求的URL不包含 minion.example.com ，则请求的为所有Minion的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- minion.example.com:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    SSDs: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    biosreleasedate: 12/10/2013&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    biosversion: X450LCP.205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    cpu_flags:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - fpu&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - vme&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - de&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - pse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - tsc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    略&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;远程执行模块&quot;&gt;&lt;a href=&quot;#远程执行模块&quot; class=&quot;headerlink&quot; title=&quot;远程执行模块&quot;&gt;&lt;/a&gt;远程执行模块&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -k https://172.25.254.135:8000/ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;Accept: application/x-yaml&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;X-Auth-Token: f59484ca66f52173fb34742fc014f7dc5b027bdd&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d client=&amp;apos;local&amp;apos; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d tgt=&amp;apos;*&amp;apos; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d fun=&amp;apos;test.ping&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Response  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- minion.example.com: true&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;运行runner&quot;&gt;&lt;a href=&quot;#运行runner&quot; class=&quot;headerlink&quot; title=&quot;运行runner&quot;&gt;&lt;/a&gt;运行runner&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -k https://172.25.254.135:8000/ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;Accept: application/x-yaml&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -H &amp;quot;X-Auth-Token: f59484ca66f52173fb34742fc014f7dc5b027bdd&amp;quot; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d client=&amp;apos;runner&amp;apos; \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     -d fun=&amp;apos;manage.status&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Response&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;return:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- down: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  up:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  -  minion.example.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;Salt API几乎涵盖了所有的salt操作，功能强劲，尤其是需要salt和第三方系统集成的场景  &lt;/p&gt;
&lt;h3 id=&quot;背后的原理&quot;&gt;&lt;a href=&quot;#背后的原理&quot; class=&quot;headerlink&quot; title=&quot;背后的原理&quot;&gt;&lt;/a&gt;背后的原理&lt;/h3&gt;&lt;p&gt;学过socket编程的同学都知道，server端接受客户端传送的数据，如果用户输入命令的话，那么调用os.popen(command,mode)等，是可以执行命令的，并且将结果返回给客户端。那么就能完成一个基于socket的远程控制系统。  &lt;/p&gt;
&lt;h3 id=&quot;本地API&quot;&gt;&lt;a href=&quot;#本地API&quot; class=&quot;headerlink&quot; title=&quot;本地API&quot;&gt;&lt;/a&gt;本地API&lt;/h3&gt;&lt;p&gt;saltstack是用python写成，我们可以在安装salt的主机上，通过python调用  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalClient  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;In [1]: import salt.client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [2]: local = salt.client.LocalClient()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [3]: local.cmd(&amp;quot;*&amp;quot;,&amp;apos;cmd.run&amp;apos;,[&amp;apos;whoami&amp;apos;])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Out[3]: &amp;#123;&amp;apos;minion.example.com&amp;apos;: &amp;apos;root&amp;apos;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Salt Caller  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;In [1]: import salt.client&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [2]: caller = salt.client.Caller()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [3]: caller.cmd(&amp;apos;test.ping&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Out[3]: True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [4]: caller.function(&amp;apos;test.ping&amp;apos;)        #早期版本不支持 caller.cmd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Out[4]: True&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;RunnerClient&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;In [6]: import salt.config&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [7]: opts =salt.config.master_config(&amp;apos;/etc/salt/master&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [8]: runner = salt.runner.R&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt.runner.Runner        salt.runner.RunnerClient  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [8]: runner = salt.runner.RunnerClient(opts)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;In [9]: runner.cmd(&amp;apos;jobs.list_jobs&amp;apos;,[])&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;返回值  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;20160809195307041368:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Arguments:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Function:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        grains.items&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    StartTime:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        2016, Aug 09 19:53:07.041368&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Target:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Target-type:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        glob&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    User:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        salt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Out[9]:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&amp;apos;20160809195307041368&amp;apos;: &amp;#123;&amp;apos;Arguments&amp;apos;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Function&amp;apos;: &amp;apos;grains.items&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;StartTime&amp;apos;: &amp;apos;2016, Aug 09 19:53:07.041368&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target&amp;apos;: &amp;apos;*&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target-type&amp;apos;: &amp;apos;glob&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;User&amp;apos;: &amp;apos;salt&amp;apos;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;apos;20160809195645164703&amp;apos;: &amp;#123;&amp;apos;Arguments&amp;apos;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Function&amp;apos;: &amp;apos;test.ping&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;StartTime&amp;apos;: &amp;apos;2016, Aug 09 19:56:45.164703&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target&amp;apos;: &amp;apos;*&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target-type&amp;apos;: &amp;apos;glob&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;User&amp;apos;: &amp;apos;salt&amp;apos;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;apos;20160809200031579904&amp;apos;: &amp;#123;&amp;apos;Arguments&amp;apos;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Function&amp;apos;: &amp;apos;test.ping&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;StartTime&amp;apos;: &amp;apos;2016, Aug 09 20:00:31.579904&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target&amp;apos;: &amp;apos;*&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target-type&amp;apos;: &amp;apos;glob&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;User&amp;apos;: &amp;apos;root&amp;apos;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;apos;20160809200943103937&amp;apos;: &amp;#123;&amp;apos;Arguments&amp;apos;: [&amp;apos;whoami&amp;apos;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Function&amp;apos;: &amp;apos;cmd.run&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;StartTime&amp;apos;: &amp;apos;2016, Aug 09 20:09:43.103937&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target&amp;apos;: &amp;apos;*&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;Target-type&amp;apos;: &amp;apos;glob&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;apos;User&amp;apos;: &amp;apos;root&amp;apos;&amp;#125;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h3&gt;&lt;p&gt;salt-api 是用 Tornado 封装了一个程式，通过继承tornado.web.RequestHandler，获取传递参数&lt;br&gt;然后根据参数，调用不同的salt命令，返回结果&lt;br&gt;简易实现如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import tornado.ioloop
import tornado.web

class SaltAPI(tornado.web.RequestHandler):
    def get(self):
        self.write(&amp;quot;Hello, world&amp;quot;)
    def post(self):
        data = simplejson.loads(self.request.body)
        获取数据
        调用 salt
        self.write(ruselt)  
application = tornado.web.Application([
    (r&amp;quot;/&amp;quot;, SaltAPI),
])

if __name__ == &amp;quot;__main__&amp;quot;:
    application.listen(8000)
    tornado.ioloop.IOLoop.instance().start()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更具体的实现，可以看salt-api源码&lt;br&gt;地址: &lt;a href=&quot;https://github.com/saltstack/salt-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;salt-api&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Salt-API安装配置及使用&quot;&gt;&lt;a href=&quot;#Salt-API安装配置及使用&quot; class=&quot;headerlink&quot; title=&quot;Salt-API安装配置及使用&quot;&gt;&lt;/a&gt;Salt-API安装配置及使用&lt;/h2&gt;&lt;p&gt;SaltStack 官方提供有REST API格式的 salt-api 项目，将使Salt与第三方系统集成变得尤为简单。本文讲带你了解如何安装配置Salt-API, 如何利用Salt-API获取想要的信息。&lt;br&gt;具体使用请参考:&lt;a href=&quot;http://salt-api.readthedocs.org/en/latest/&quot;&gt;salt-api手册&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://iceziyao.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="自动化运维" scheme="https://iceziyao.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
      <category term="saltstack" scheme="https://iceziyao.github.io/tags/saltstack/"/>
    
  </entry>
  
  <entry>
    <title>Saltstack安装使用</title>
    <link href="https://iceziyao.github.io/2016/06/23/Auto/salt1/"/>
    <id>https://iceziyao.github.io/2016/06/23/Auto/salt1/</id>
    <published>2016-06-22T16:00:00.000Z</published>
    <updated>2016-08-08T10:29:15.243Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是Saltstack-？&quot;&gt;&lt;a href=&quot;#什么是Saltstack-？&quot; class=&quot;headerlink&quot; title=&quot;什么是Saltstack ？&quot;&gt;&lt;/a&gt;什么是Saltstack ？&lt;/h2&gt;&lt;p&gt;Saltstack 是一个具备puppet 与func 功能为一身的集中化管理平台，saltstack 基于python实现，功能十分强大，各模块融合度及复用性极高，官方极力推荐作为云计算平台的基础架构。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装Saltstack&quot;&gt;&lt;a href=&quot;#安装Saltstack&quot; class=&quot;headerlink&quot; title=&quot;安装Saltstack&quot;&gt;&lt;/a&gt;安装Saltstack&lt;/h2&gt;&lt;h3 id=&quot;6系列yum安装&quot;&gt;&lt;a href=&quot;#6系列yum安装&quot; class=&quot;headerlink&quot; title=&quot;6系列yum安装&quot;&gt;&lt;/a&gt;6系列yum安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;rpm -ivh http://mirrors.yun-idc.com/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install salt-master     #主控端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install salt-minion     # 被控端&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;7系列安装&quot;&gt;&lt;a href=&quot;#7系列安装&quot; class=&quot;headerlink&quot; title=&quot;7系列安装&quot;&gt;&lt;/a&gt;7系列安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install https://repo.saltstack.com/yum/redhat/salt-repo-latest-1.el7.noarch.rpm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install salt-master     #主控端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;yum install salt-minion     # 被控端&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;pip安装&quot;&gt;&lt;a href=&quot;#pip安装&quot; class=&quot;headerlink&quot; title=&quot;pip安装&quot;&gt;&lt;/a&gt;pip安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pip install salt&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;salt-bootstrap安装&quot;&gt;&lt;a href=&quot;#salt-bootstrap安装&quot; class=&quot;headerlink&quot; title=&quot;salt-bootstrap安装&quot;&gt;&lt;/a&gt;salt-bootstrap安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;curl -L https://bootstrap.saltstack.com -O install_salt.sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;运行脚本查看用法&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;配置Saltstack&quot;&gt;&lt;a href=&quot;#配置Saltstack&quot; class=&quot;headerlink&quot; title=&quot;配置Saltstack&quot;&gt;&lt;/a&gt;配置Saltstack&lt;/h2&gt;&lt;h3 id=&quot;主动端&quot;&gt;&lt;a href=&quot;#主动端&quot; class=&quot;headerlink&quot; title=&quot;主动端&quot;&gt;&lt;/a&gt;主动端&lt;/h3&gt;&lt;h4 id=&quot;相关文件&quot;&gt;&lt;a href=&quot;#相关文件&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/master        #主配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/master.d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/pki/master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-cp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-master&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-run&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-unity&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置文件-etc-salt-master&quot;&gt;&lt;a href=&quot;#配置文件-etc-salt-master&quot; class=&quot;headerlink&quot; title=&quot;配置文件 /etc/salt/master&quot;&gt;&lt;/a&gt;配置文件 /etc/salt/master&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;interface: 127.0.0.1        #监听端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;auto_accept: True           # 自动接受认证&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;控制端&quot;&gt;&lt;a href=&quot;#控制端&quot; class=&quot;headerlink&quot; title=&quot;控制端&quot;&gt;&lt;/a&gt;控制端&lt;/h3&gt;&lt;h4 id=&quot;相关文件-1&quot;&gt;&lt;a href=&quot;#相关文件-1&quot; class=&quot;headerlink&quot; title=&quot;相关文件&quot;&gt;&lt;/a&gt;相关文件&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/minion&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/minion.d&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/pki/minion&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/etc/salt/proxy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-call&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-minion&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/usr/bin/salt-proxy&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;master: 172.25.254.135        #主控端&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;id:salt-test                  #id，最好是主机名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&quot;key认证&quot;&gt;&lt;a href=&quot;#key认证&quot; class=&quot;headerlink&quot; title=&quot;key认证&quot;&gt;&lt;/a&gt;key认证&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;salt-key -L 显示所有的key&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Accepted Keys:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Denied Keys:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Unaccepted Keys:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt-test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Rejected Keys:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;salt-key -A -y&lt;br&gt;接受所有的key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;salt-key -D&lt;br&gt;删除所以的key&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink&quot; title=&quot;基本操作&quot;&gt;&lt;/a&gt;基本操作&lt;/h3&gt;&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[root@foundation101 salt]# salt &amp;apos;*&amp;apos; test.ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt-test:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[root@foundation101 salt]# salt &amp;apos;*&amp;apos; test.versions_information&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt-test:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Dependency Versions:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Jinja2:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2.7.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        M2Crypto:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            0.21.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Mako:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PyYAML:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            3.10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        PyZMQ:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            14.7.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Python:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2.7.5 (default, Feb 11 2014, 07:46:25)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RAET:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Tornado:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            4.2.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ZMQ:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            4.0.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cffi:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            1.7.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cherrypy:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            3.2.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dateutil:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            1.5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gitdb:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        gitpython:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ioflo:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        libgit2:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        libnacl:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        msgpack-pure:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        msgpack-python:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            0.4.6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        mysql-python:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            1.2.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pycparser:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2.14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pycrypto:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2.6.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pygit2:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        python-gnupg:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        smmap:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        timelib:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            None&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Salt Version:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Salt:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            2016.3.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    System Versions:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ----------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        dist:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            redhat 7.1 Maipo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        machine:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        release:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            3.10.0-123.el7.x86_64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        system:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Linux&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        version:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Red Hat Enterprise Linux Server 7.1 Maipo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;查看线上运行的服务器：&quot;&gt;&lt;a href=&quot;#查看线上运行的服务器：&quot; class=&quot;headerlink&quot; title=&quot;查看线上运行的服务器：&quot;&gt;&lt;/a&gt;查看线上运行的服务器：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;down:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;up:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    - salt-test&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;salt有用指令：&quot;&gt;&lt;a href=&quot;#salt有用指令：&quot; class=&quot;headerlink&quot; title=&quot;salt有用指令：&quot;&gt;&lt;/a&gt;salt有用指令：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;salt &amp;apos;*&amp;apos; saltutil.running&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt &amp;apos;*&amp;apos; saltutil.kill_job jobid&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;salt &amp;apos;*&amp;apos; saltutil.find_job jobid&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Saltstack-？&quot;&gt;&lt;a href=&quot;#什么是Saltstack-？&quot; class=&quot;headerlink&quot; title=&quot;什么是Saltstack ？&quot;&gt;&lt;/a&gt;什么是Saltstack ？&lt;/h2&gt;&lt;p&gt;Saltstack 是一个具备puppet 与func 功能为一身的集中化管理平台，saltstack 基于python实现，功能十分强大，各模块融合度及复用性极高，官方极力推荐作为云计算平台的基础架构。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://iceziyao.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="自动化运维" scheme="https://iceziyao.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
      <category term="saltstack" scheme="https://iceziyao.github.io/tags/saltstack/"/>
    
  </entry>
  
  <entry>
    <title>Ycm，我的自动化运维之路</title>
    <link href="https://iceziyao.github.io/2016/06/17/Auto/Ycm%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    <id>https://iceziyao.github.io/2016/06/17/Auto/Ycm自动化运维/</id>
    <published>2016-06-16T16:00:00.000Z</published>
    <updated>2016-08-08T09:24:56.650Z</updated>
    
    <content type="html">&lt;h3 id=&quot;我的运维之路&quot;&gt;&lt;a href=&quot;#我的运维之路&quot; class=&quot;headerlink&quot; title=&quot;我的运维之路&quot;&gt;&lt;/a&gt;我的运维之路&lt;/h3&gt;&lt;p&gt;最开始的运维，就是在终端连接一台主机，远程操作。其次就是一些脚本，解放了重复。之后就是各种python脚本，python提供很多第三方库，可以提高运维效率。&lt;br&gt;接触到自动化运维工具：ansible，pupple，puppet，Func, Saltstack等一系列监控工具&lt;br&gt;但所有的资源都是分散的，所以，就要做一款自己的运维平台&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Ycm是一个基于python的B-S自动化运维平台&quot;&gt;&lt;a href=&quot;#Ycm是一个基于python的B-S自动化运维平台&quot; class=&quot;headerlink&quot; title=&quot;Ycm是一个基于python的B/S自动化运维平台&quot;&gt;&lt;/a&gt;Ycm是一个基于python的B/S自动化运维平台&lt;/h3&gt;&lt;p&gt;当然，我也是站在巨人的肩膀上完成这个任务。感谢bingbing大神的代码，以及刘天斯的&amp;lt;&amp;lt;自动化运维&amp;gt;&amp;gt;一书&lt;br&gt;项目地址&lt;a href=&quot;https://github.com/iceziYao/Ycm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ycm,我的自动化运维之路 &lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Ycm简介&quot;&gt;&lt;a href=&quot;#Ycm简介&quot; class=&quot;headerlink&quot; title=&quot;Ycm简介&quot;&gt;&lt;/a&gt;Ycm简介&lt;/h4&gt;&lt;h5 id=&quot;1-平台功能介绍&quot;&gt;&lt;a href=&quot;#1-平台功能介绍&quot; class=&quot;headerlink&quot; title=&quot;1.平台功能介绍&quot;&gt;&lt;/a&gt;1.平台功能介绍&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; 作为ITIL体系当中的一部分，本平台同样遵循ITIL标准设计规范。Ycm是本平台的名称，为了向vim伟大插件YouCompleteM致敬。Ycm实现了一个集中式的linux集群管理基础平台，提供了模块化的支持，可以随意增加集群操作任务模块，可实现日常运维远程操作，文件分发等任务，在安全方面，目前采用md5指令传输，操作日志记录，分离web server与主控设备，在效率方面，管理员只需要操作指定目标即可完成。另外采用ajax，已及mvc结构的实现。具有高度的可扩展性. &lt;/strong&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-系统架构设计&quot;&gt;&lt;a href=&quot;#2-系统架构设计&quot; class=&quot;headerlink&quot; title=&quot;2.系统架构设计&quot;&gt;&lt;/a&gt;2.系统架构设计&lt;/h5&gt;&lt;p&gt;Ycm平台采用三层设计模式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一层为Web交互层，采用Django+jquery,服务器端采用Nginx+uwsgi构建高效的web服务&lt;/li&gt;
&lt;li&gt;第二层业务逻辑层，有Python+Django  &lt;/li&gt;
&lt;li&gt;第三层为服务层&lt;br&gt;3.1 存储采用mysql&lt;br&gt;3.2 自动化运维ansible/Saltstack api&lt;br&gt;3.3 监控采用zabbix api&lt;br&gt;3.4 运维审计  &lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&quot;3-数据库设计&quot;&gt;&lt;a href=&quot;#3-数据库设计&quot; class=&quot;headerlink&quot; title=&quot;3.数据库设计&quot;&gt;&lt;/a&gt;3.数据库设计&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;用户列表  &lt;/li&gt;
&lt;li&gt;资产管理&lt;br&gt;2.1 服务列表&lt;br&gt;2.2 主机列表&lt;br&gt;2.3 IDC机房信息  &lt;/li&gt;
&lt;li&gt;运维审计  &lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Ycm开发环境&quot;&gt;&lt;a href=&quot;#Ycm开发环境&quot; class=&quot;headerlink&quot; title=&quot;Ycm开发环境&quot;&gt;&lt;/a&gt;Ycm开发环境&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;cestos 7.0&lt;/li&gt;
&lt;li&gt;python 2.75&lt;/li&gt;
&lt;li&gt;Django 1.85&lt;/li&gt;
&lt;li&gt;ansible/Saltstack/Func(其一) api&lt;/li&gt;
&lt;li&gt;clobbe&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;功能简介&quot;&gt;&lt;a href=&quot;#功能简介&quot; class=&quot;headerlink&quot; title=&quot;功能简介&quot;&gt;&lt;/a&gt;功能简介&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;我的运维之路&quot;&gt;&lt;a href=&quot;#我的运维之路&quot; class=&quot;headerlink&quot; title=&quot;我的运维之路&quot;&gt;&lt;/a&gt;我的运维之路&lt;/h3&gt;&lt;p&gt;最开始的运维，就是在终端连接一台主机，远程操作。其次就是一些脚本，解放了重复。之后就是各种python脚本，python提供很多第三方库，可以提高运维效率。&lt;br&gt;接触到自动化运维工具：ansible，pupple，puppet，Func, Saltstack等一系列监控工具&lt;br&gt;但所有的资源都是分散的，所以，就要做一款自己的运维平台&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://iceziyao.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="Python" scheme="https://iceziyao.github.io/tags/Python/"/>
    
      <category term="自动化运维" scheme="https://iceziyao.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python的内存管理机制</title>
    <link href="https://iceziyao.github.io/2016/05/21/Python/python01/"/>
    <id>https://iceziyao.github.io/2016/05/21/Python/python01/</id>
    <published>2016-05-20T16:00:00.000Z</published>
    <updated>2016-08-06T14:49:28.945Z</updated>
    
    <content type="html">&lt;h2 id=&quot;python的内存管理分为三个方面：&quot;&gt;&lt;a href=&quot;#python的内存管理分为三个方面：&quot; class=&quot;headerlink&quot; title=&quot;python的内存管理分为三个方面：&quot;&gt;&lt;/a&gt;python的内存管理分为三个方面：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;引用计数&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;垃圾回收&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;内存池机制&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;浅析引用计数&quot;&gt;&lt;a href=&quot;#浅析引用计数&quot; class=&quot;headerlink&quot; title=&quot;浅析引用计数&quot;&gt;&lt;/a&gt;浅析引用计数&lt;/h2&gt;&lt;p&gt;python内部使用引用计数，来保持追踪内存中的对象，Python内部记录了对象有多少个引用，即引用计数，当对象被创建时就创建了一个引用计数，当对象不再需要时，这个对象的引用计数为0时，它被垃圾回收。  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用计数增加的情况：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.对象被创建：x=4&lt;br&gt;2.另外的别人被创建：y=x&lt;br&gt;3.被作为参数传递给函数：foo(x)&lt;br&gt;4.作为容器对象的一个元素：a=[1,x,’33’]  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;引用计数减少情况  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.一个本地引用离开了它的作用域。比如上面的foo(x)函数结束时，x指向的对象引用减1。&lt;br&gt;2.对象的别名被显式的销毁：del x ；或者del y&lt;br&gt;3.对象的一个别名被赋值给其他对象：x=789&lt;br&gt;4.对象从一个窗口对象中移除：myList.remove(x)&lt;br&gt;5.窗口对象本身被销毁：del myList，或者窗口对象本身离开了作用域。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何获取一个变量的引用计数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&gt;&gt; import sys
&gt;&gt; x = 1
&gt;&gt; sys.getrefcount(x)
599
&gt;&gt; y = x
&gt;&gt; sys.getrefcount(x)
600
&gt;&gt; del y
&gt;&gt; sys.getrefcount(x)
599
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;
&lt;h2 id=&quot;垃圾回收&quot;&gt;&lt;a href=&quot;#垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收&quot;&gt;&lt;/a&gt;垃圾回收&lt;/h2&gt;&lt;p&gt;python的垃圾回收机制以引用计数为主，标记-清除和分代收集为辅。  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;引用计数&lt;br&gt;优点：“实时性”，任何内存，一旦没有指向它的引用，就会立即被回收。&lt;br&gt;缺点：&lt;br&gt;(1). 效率底下：引用计数机制带来的计数操作，与引用赋值成正比。频繁的技术操作，会给CPU带来大量消耗。&lt;br&gt;(2). 循环引用：也就是两个对象相互引用，这样的话，两个对象的引用计数永远不会为0，及它们永远不被清除。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标记-清除&lt;br&gt;标记-清除是为了解决循环引用的问题。可以包含其他对象引用的容器对象（比如：list，set，dict，class，instance）都可能产生循环引用。&lt;br&gt;2.1 假设&lt;br&gt;如果两个对象的引用计数都为1的话，但仅仅存在它们之间的相互引用，那么，我们可以认为这两个对象的实际引用计数为0.如果我们将这个引用循环去掉，那么它们的实际引用计数才会显现。&lt;br&gt;案例：有循环引用的A,B两个对象，从A出发，因为它有一个对B的引用，则将B的引用计数减1；然后顺着引用达到B，因为B有一个对A的引用，同样将A的引用减1，这样，就完成了循环引用对象间环摘除。&lt;br&gt;问题：如果A,B间没有循环引用，但A引用了B，B没有以用A，贸然的将B计数引用减1，而A没有被回收，这将导致在未来的某个时刻出现一个对B的悬空引用，类似与C的空指针异常。这就要求我们必须在A没有被删除的情况下复原B的引用计数，那么维护引用计数的复杂度将成倍增加。&lt;br&gt;2.2 标记-清除的原理&lt;br&gt;原理：&lt;br&gt;我们并不改动真实的引用计数，而是将集合中对象的引用计数复制一份副本，改动该对象引用的副本。对于副本做任何的改动，都不会影响到对象生命走起的维护。&lt;br&gt;这个计数副本的唯一作用是寻找root object集合（该集合中的对象是不能被回收的）。当成功寻找到root object集合之后，首先将现在的内存链表一分为二，一条链表中维护root object集合，成为root链表，而另外一条链表中维护剩下的对象，成为unreachable链表。之所以要剖成两个链表，是基于这样的一种考虑：现在的unreachable可能存在被root链表中的对象，直接或间接引用的对象，这些对象是不能被回收的，一旦在标记的过程中，发现这样的对象，就将其从unreachable链表中移到root链表中；当完成标记后，unreachable链表中剩下的所有对象就是名副其实的垃圾对象了，接下来的垃圾回收只需限制在unreachable链表中即可。&lt;br&gt;效率分析：&lt;br&gt;从垃圾收集机制来看，这种垃圾收集机制所带来的额外操作实际上与系统中总的内存块的数量是相关的，当需要回收的内存块越多时，垃圾检测带来的额外操作就越多，而垃圾回收带来的额外操作就越少；反之，当需回收的内存块越少时，垃圾检测就将比垃圾回收带来更少的额外操作。  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分代回收&lt;br&gt;3.1 理论：&lt;br&gt;无论使用何种语言开发，无论开发的是何种类型，何种规模的程序，都存在这样一点相同之处。即：一定比例的内存块的生存周期都比较短，通常是几百万条机器指令的时间，而剩下的内存块，起生存周期比较长，甚至会从程序开始一直持续到程序结束。&lt;br&gt;3.2 原理：&lt;br&gt;将系统中的所有内存块根据其存活时间划分为不同的集合，每一个集合就成为一个“代”，垃圾收集的频率随着“代”的存活时间的增大而减小。也就是说，活得越长的对象，就越不可能是垃圾，就应该减少对它的垃圾收集频率。那么如何来衡量这个存活时间：通常是利用几次垃圾收集动作来衡量，如果一个对象经过的垃圾收集次数越多，可以得出：该对象存活时间就越长。也就是符合马太福音，存活久的让它继续存活下去。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;内存池机制&quot;&gt;&lt;a href=&quot;#内存池机制&quot; class=&quot;headerlink&quot; title=&quot;内存池机制&quot;&gt;&lt;/a&gt;内存池机制&lt;/h2&gt;&lt;p&gt;Python的内存机制以金字塔层次：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存分配层次：  &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;　　-1，-2层主要有操作系统进行操作，  
　&lt;/em&gt;　第0层是C中的malloc，free等内存分配和释放函数进行操作；&lt;br&gt;　&lt;em&gt;　第1层和第2层是内存池，有Python的接口函数PyMem_Malloc函数实现，当对象小于256K时有该层直接分配内存；  
　&lt;/em&gt; 　第3层是最上层，也就是我们对Python对象的直接操作；  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;原因  &lt;ul&gt;
&lt;li&gt;在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;具现化&lt;br&gt;Python提供了对内存的垃圾收集机制，但是它将不用的内存放到内存池而不是返回给操作系统。&lt;br&gt;　　Python中所有小于256个字节的对象都使用pymalloc实现的分配器，而大的对象则使用系统的 malloc。另外Python对象，如整数，浮点数和List，都有其独立的私有内存池，对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数，用于缓存这些整数的内存就不能再分配给浮点数。&lt;br&gt;　　在Python中，许多时候申请的内存都是小块的内存，这些小块内存在申请后，很快又会被释放，由于这些内存的申请并不是为了创建对象，所以并没有对象一级的内存池机制。这就意味着Python在运行期间会大量地执行malloc和free的操作，频繁地在用户态和核心态之间进行切换，这将严重影响 Python的执行效率。为了加速Python的执行效率，Python引入了一个内存池机制，用于管理对小块内存的申请和释放。这也就是之前提到的 Pymalloc机制。&lt;br&gt;　　Pymalloc 关于释放内存方面，当一个对象的 引用计数变为0时，python就会调用它的析构函数。在析构时，也采用了内存池机制，从内存池来的内存会被归还到内存池中，以避免频繁地释放动作。&lt;br&gt;　　Pymalloc分配一系列256KB的内存块，称之为arena。每个arena分割为4KB大小的内存池Pool，每个Pool再切分为固定大小的Block。在内存分配时，分配给进程的就是这些Blocks。&lt;br&gt;&lt;a href=&quot;http://nodefe.com/implement-of-pymalloc-from-source/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;需要了解Pymalloc的看这篇博文&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;python的内存管理分为三个方面：&quot;&gt;&lt;a href=&quot;#python的内存管理分为三个方面：&quot; class=&quot;headerlink&quot; title=&quot;python的内存管理分为三个方面：&quot;&gt;&lt;/a&gt;python的内存管理分为三个方面：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;em&gt;引用计数&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;垃圾回收&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;内存池机制&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://iceziyao.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://iceziyao.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python GIL那些事</title>
    <link href="https://iceziyao.github.io/2016/05/21/Python/Python_GIL/"/>
    <id>https://iceziyao.github.io/2016/05/21/Python/Python_GIL/</id>
    <published>2016-05-20T16:00:00.000Z</published>
    <updated>2016-08-06T14:49:25.694Z</updated>
    
    <content type="html">&lt;h2 id=&quot;GIL是什么？&quot;&gt;&lt;a href=&quot;#GIL是什么？&quot; class=&quot;headerlink&quot; title=&quot;GIL是什么？&quot;&gt;&lt;/a&gt;GIL是什么？&lt;/h2&gt;&lt;p&gt;GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPython实现中的GIL？&lt;blockquote&gt;
&lt;p&gt;Global Interpreter Lock  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个防止多线程并发执行机器码的一个Mutex&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt; 看起来就像一个BUG &lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;python为什么使用GIL的机制&quot;&gt;&lt;a href=&quot;#python为什么使用GIL的机制&quot; class=&quot;headerlink&quot; title=&quot;python为什么使用GIL的机制?&quot;&gt;&lt;/a&gt;python为什么使用GIL的机制?&lt;/h2&gt;&lt;p&gt;由于物理上得限制，各CPU厂商在核心频率上的比赛已经被多核所取代。为了更有效的利用多核处理器的性能，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多核时代的出现对于我们程序员而言意味着什么, 我们如何利用多核的优势?&lt;br&gt;可以采用 多进程, 也可以采用 多线程. 二者的最大区别就是, 是否共享资源, 后者是共享资源的,而前者是独立的. 所以你也可能想起了google chrome为什么又开始使用独立的进程 来作为每个tab服务了(不共享数据,意味着有更好的安全性).&lt;br&gt;相对于进程的轻型特征,多线程环境有个最大的问题就是 如何保证&lt;strong&gt;资源竞争,死锁, 数据修改&lt;/strong&gt;等.&lt;br&gt;于是,便有了 线程安全 (thread safety)的提出.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;线程安全&quot;&gt;&lt;a href=&quot;#线程安全&quot; class=&quot;headerlink&quot; title=&quot;线程安全&quot;&gt;&lt;/a&gt;线程安全&lt;/h3&gt;&lt;p&gt;线程安全 是在多线程的环境下, 线程安全能够保证多个线程同时执行时程序依旧运行正确, 而且要保证对于共享的数据,可以由多个线程存取,但是同一时刻只能有一个线程进行存取.&lt;br&gt;既然,多线程环境下必须存在资源的竞争,那么如何才能保证同一时刻只有一个线程对共享资源进行存取?&lt;br&gt;加锁, 对, 加锁可以保证存取操作的唯一性, 从而保证同一时刻只有一个线程对共享数据存取.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通常加锁也有2种不同的粒度的锁:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;fine-grained(所谓的细粒度), 那么程序员需要自行地加,解锁来保证线程安全  &lt;/li&gt;
&lt;li&gt;coarse-grained(所谓的粗粒度), 那么语言层面本身维护着一个全局的锁机制,用来保证线程安全&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;前一种方式比较典型的是 java, Jython 等, 后一种方式比较典型的是 CPython (即Python).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Python的GIL&quot;&gt;&lt;a href=&quot;#Python的GIL&quot; class=&quot;headerlink&quot; title=&quot;Python的GIL&quot;&gt;&lt;/a&gt;Python的GIL&lt;/h3&gt;&lt;p&gt;GIL是必要的，因为CPython的内存管理是非线程安全的。你不能简单地创建多个线程，并希望Python能在多核心的机器上运行得更快。这是因为GIL將会防止多个原生线程同时执行Python字节码。换句话说，GIL將序列化您的所有线程。然而，您可以使用线程管理多个派生进程加速程序，这些程序独立的运行于你的Python代码外。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过程&lt;br&gt;全局解释器锁（global interpreter lock）如其名运行在解释器主循环中，在多线程环境下，任何一条线程想要执行代码的时候，都必须获取（acquire）到这个锁，运行一定数量字节码，然后释放（release）掉，然后再尝试获取。这样 GIL 就保证了同时只有一条线程在执行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;GIL带来的性能问题&quot;&gt;&lt;a href=&quot;#GIL带来的性能问题&quot; class=&quot;headerlink&quot; title=&quot;GIL带来的性能问题&quot;&gt;&lt;/a&gt;GIL带来的性能问题&lt;/h4&gt;&lt;p&gt;一般来说，GIL 并不会带来麻烦，因为大多数程序的性能瓶颈都在 IO 上（IO-bound）。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;顺序执行的单线程(single_thread.py)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#! /usr/bin/python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;from threading import Thread&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def my_counter():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  i = 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for _ in range(100000000):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i = i + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def main():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  thread_array = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  start_time = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for tid in range(2):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t = Thread(target=my_counter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t.start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_array[tid] = t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for i in range(2):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_array[i].join()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end_time = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&amp;quot;Total time: &amp;#123;&amp;#125;&amp;quot;.format(end_time - start_time))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  main()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同时执行的两个并发线程(multi_thread.py)&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#! /usr/bin/python&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;from threading import Thread&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import time&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def my_counter():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  i = 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for _ in range(100000000):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    i = i + 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  return True&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def main():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  thread_array = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  start_time = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for tid in range(2):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t = Thread(target=my_counter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t.start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_array[tid] = t&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  for i in range(2):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    thread_array[i].join()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  end_time = time.time()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  print(&amp;quot;Total time: &amp;#123;&amp;#125;&amp;quot;.format(end_time - start_time))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if __name__ == &amp;apos;__main__&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  main()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;GIL设计上带来的缺陷&quot;&gt;&lt;a href=&quot;#GIL设计上带来的缺陷&quot; class=&quot;headerlink&quot; title=&quot;GIL设计上带来的缺陷&quot;&gt;&lt;/a&gt;GIL设计上带来的缺陷&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基于pcode数量的调度方式&lt;br&gt;按照Python社区的想法，操作系统本身的线程调度已经非常成熟稳定了，没有必要自己搞一套。所以Python的线程就是C语言的一个pthread，并通过操作系统调度算法进行调度（例如linux是CFS）。为了让各个线程能够平均利用CPU时间，python会计算当前已执行的微代码数量，达到一定阈值后就强制释放GIL。而这时也会触发一次操作系统的线程调度（当然是否真正进行上下文切换由操作系统自主决定）。&lt;pre&gt;&lt;code class=&quot;+python&quot;&gt;while True:
  acquire GIL
  for i in 1000:
      do something
  release GIL
&lt;/code&gt;&lt;/pre&gt;
这种模式在只有一个CPU核心的情况下毫无问题。任何一个线程被唤起时都能成功获得到GIL（因为只有释放了GIL才会引发线程调度）。但当CPU有多个核心的时候，问题就来了。从伪代码可以看到，从 release GIL 到 acquire GIL 之间几乎是没有间隙的。所以当其他在其他核心上的线程被唤醒时，大部分情况下主线程已经又再一次获取到GIL了。这个时候被唤醒执行的线程只能白白的浪费CPU时间，看着另一个线程拿着GIL欢快的执行着。然后达到切换时间后进入待调度状态，再被唤醒，再等待，以此往复恶性循环。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;为什么一定要用GIL&quot;&gt;&lt;a href=&quot;#为什么一定要用GIL&quot; class=&quot;headerlink&quot; title=&quot;为什么一定要用GIL&quot;&gt;&lt;/a&gt;为什么一定要用GIL&lt;/h4&gt;&lt;p&gt;参考其他实现的话，你可能会问一个问题，为什么要使用全局锁，而不是一个更细粒度的锁呢？实际上 Linux 的文件系统就是这样做的，进程给目标文件加锁的时候，可以只加一定字节数的锁，只要另一个进程准备加的锁与其没有交集的话，这两个锁就可以共存，这两个进程也可以同时修改这一个文件（的不同部分）。因此对于 Python，也许可以给对象加锁，同时不限制线程的并行执行。但从网上的信息来看，似乎这种思路曾经被尝试实现过，但细粒度的锁会给单线程模式下的性能造成明显影响。  &lt;/p&gt;
&lt;h3 id=&quot;如何避免python-GIL带来的性能影响&quot;&gt;&lt;a href=&quot;#如何避免python-GIL带来的性能影响&quot; class=&quot;headerlink&quot; title=&quot;如何避免python GIL带来的性能影响&quot;&gt;&lt;/a&gt;如何避免python GIL带来的性能影响&lt;/h3&gt;&lt;h4 id=&quot;用multiprocess替代Thread&quot;&gt;&lt;a href=&quot;#用multiprocess替代Thread&quot; class=&quot;headerlink&quot; title=&quot;用multiprocess替代Thread&quot;&gt;&lt;/a&gt;用multiprocess替代Thread&lt;/h4&gt;&lt;p&gt;multiprocess库的出现很大程度上是为了弥补thread库因为GIL而低效的缺陷。它完整的复制了一套thread所提供的接口方便迁移。唯一的不同就是它使用了多进程而不是多线程。每个进程有自己的独立的GIL，因此也不会出现进程之间的GIL争抢。&lt;br&gt;当然multiprocess也不是万能良药。它的引入会增加程序实现时线程间数据通讯和同步的困难。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们要多个线程累加同一个变量，对于thread来说，申明一个global变量，用thread.Lock的context包裹住三行就搞定了。而multiprocess由于进程之间无法看到对方的数据，只能通过在主线程申明一个Queue，put再get或者用share memory的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;用其他解析器&quot;&gt;&lt;a href=&quot;#用其他解析器&quot; class=&quot;headerlink&quot; title=&quot;用其他解析器&quot;&gt;&lt;/a&gt;用其他解析器&lt;/h4&gt;&lt;p&gt;既然GIL只是CPython的产物，那么其他解析器是不是更好呢？没错，像JPython这样的解析器由于实现语言的特性，他们不需要GIL的帮助，程序员自身加锁。但这些解析器太小众，会失去很多第三方的支持。有得必有失，所以看自己的选择。  &lt;/p&gt;
&lt;h4 id=&quot;指定CPU运行&quot;&gt;&lt;a href=&quot;#指定CPU运行&quot; class=&quot;headerlink&quot; title=&quot;指定CPU运行&quot;&gt;&lt;/a&gt;指定CPU运行&lt;/h4&gt;&lt;p&gt;在linux下，也可以用taskset命令来设置进程运行的CPU  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;GIL是什么？&quot;&gt;&lt;a href=&quot;#GIL是什么？&quot; class=&quot;headerlink&quot; title=&quot;GIL是什么？&quot;&gt;&lt;/a&gt;GIL是什么？&lt;/h2&gt;&lt;p&gt;GIL并不是Python的特性，它是在实现Python解析器(CPython)时所引入的一个概念。就好比C++是一套语言（语法）标准，但是可以用不同的编译器来编译成可执行代码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPython实现中的GIL？&lt;blockquote&gt;
&lt;p&gt;Global Interpreter Lock  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个防止多线程并发执行机器码的一个Mutex&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://iceziyao.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://iceziyao.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Redis基础篇</title>
    <link href="https://iceziyao.github.io/2016/05/07/Redis/redis1/"/>
    <id>https://iceziyao.github.io/2016/05/07/Redis/redis1/</id>
    <published>2016-05-06T16:00:00.000Z</published>
    <updated>2016-08-29T23:14:00.066Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;优势&quot;&gt;&lt;a href=&quot;#优势&quot; class=&quot;headerlink&quot; title=&quot;优势&quot;&gt;&lt;/a&gt;优势&lt;/h2&gt;&lt;h3 id=&quot;Redis特点&quot;&gt;&lt;a href=&quot;#Redis特点&quot; class=&quot;headerlink&quot; title=&quot;Redis特点&quot;&gt;&lt;/a&gt;Redis特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redis是完全在内存中保存数据的数据库，使用磁盘只是为了持久性目的；&lt;/li&gt;
&lt;li&gt;Redis相比许多键值数据存储系统有相对丰富的数据类型；&lt;/li&gt;
&lt;li&gt;Redis可以将数据复制到任意数量的从服务器中；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Redis优势&quot;&gt;&lt;a href=&quot;#Redis优势&quot; class=&quot;headerlink&quot; title=&quot;Redis优势&quot;&gt;&lt;/a&gt;Redis优势&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异常快速 : Redis是非常快的，每秒可以执行大约110000设置操作，81000个/每秒的读取操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持丰富的数据类型 : Redis支持最大多数开发人员已经知道如列表，集合，可排序集合，哈希等数据类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这使得在应用中很容易解决的各种问题，因为我们知道哪些问题处理使用哪种数据类型更好解决。&lt;br&gt;操作都是原子的 : 所有 Redis 的操作都是原子，从而确保当两个客户同时访问 Redis 服务器得到的是更新后的值（最新值）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MultiUtility工具：Redis是一个多功能实用工具，可以在很多如：缓存，消息传递队列中使用（Redis原生支持发布/订阅），在应用程序中，如：Web应用程序会话，网站页面点击数等任何短暂的数据；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Redis环境&quot;&gt;&lt;a href=&quot;#Redis环境&quot; class=&quot;headerlink&quot; title=&quot;Redis环境&quot;&gt;&lt;/a&gt;Redis环境&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;h4 id=&quot;Centos-Redhat&quot;&gt;&lt;a href=&quot;#Centos-Redhat&quot; class=&quot;headerlink&quot; title=&quot;Centos/Redhat&quot;&gt;&lt;/a&gt;Centos/Redhat&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ tar xzf redis-2.8.17.tar.gz&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd redis-2.8.17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ make  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cp redis-server /usr/local/bin/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$cp redis-cli /usr/local/bin/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install redis-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;启动redis&quot;&gt;&lt;a href=&quot;#启动redis&quot; class=&quot;headerlink&quot; title=&quot;启动redis&quot;&gt;&lt;/a&gt;启动redis&lt;/h4&gt;&lt;p&gt;&lt;code&gt;redis-server&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;br&gt;&lt;code&gt;redis 127.0.0.1:6379&amp;gt;&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ping&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PONG&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Redis数据类型&quot;&gt;&lt;a href=&quot;#Redis数据类型&quot; class=&quot;headerlink&quot; title=&quot;Redis数据类型&quot;&gt;&lt;/a&gt;Redis数据类型&lt;/h2&gt;&lt;p&gt;Redis 支持5种数据类型，说明如下：&lt;/p&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;Redis 字符串是一个字节序列。在 Redis 中字符串是二进制安全的，这意味着它们没有任何特殊终端字符来确定长度，所以可以存储任何长度为 512 兆的字符串。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SET name &amp;quot;yiibai&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; GET name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;yiibai&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，SET 和 GET 是 Redis 命令，name 和 “yiibai” 是存储在 Redis 的键和字符串值。&lt;/p&gt;
&lt;h3 id=&quot;哈希&quot;&gt;&lt;a href=&quot;#哈希&quot; class=&quot;headerlink&quot; title=&quot;哈希&quot;&gt;&lt;/a&gt;哈希&lt;/h3&gt;&lt;p&gt;Redis哈希是键值对的集合。 Redis哈希是字符串字段和字符串值之间的映射，所以它们用来表示对象。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; HMSET user:1 username yiibai password yiibai points 200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; HGETALL user:1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;username&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;yiibai&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;password&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4) &amp;quot;yiibai&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5) &amp;quot;points&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6) &amp;quot;200&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中，哈希数据类型用于存储包含用户基本信息的用户对象。这里 HSET，HEXTALL 是 Redis 命令同时 user:1 也是一个键。&lt;/p&gt;
&lt;h3 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h3&gt;&lt;p&gt;Redis 列表是简单的字符串列表，通过插入顺序排序。可以添加一个元素到 Redis 列表的头部或尾部。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; lpush tutoriallist redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; lpush tutoriallist mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; lpush tutoriallist rabitmq&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; lrange tutoriallist 0 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;rabitmq&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表的最大长度为  232 - 1 个元素（4294967295，每个列表的元素超过四十亿）。&lt;/p&gt;
&lt;h3 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h3&gt;&lt;p&gt;Redis 集合是字符串的无序集合。在 Redis 可以添加，删除和测试成员存在的时间复杂度为 O（1）。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; sadd tutoriallist redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; sadd tutoriallist mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; sadd tutoriallist redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; smembers tutoriallist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中 redis 被添加两次，但由于它是只集合具有唯一特性。集合中的成员最大数量为 232 - 1（4294967295，每个集合有超过四十亿条记录）。&lt;br&gt;不同的是，一个有序集合的每个成员都可以排序，就是为了按有序集合排序获取它们，按权重分值从最小到最大排序。虽然成员都是独一无二的，按权重分数值可能会重复。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; zadd tutoriallist 0 redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; zadd tutoriallist 0 mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; zadd tutoriallist 0 rabitmq&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; zadd tutoriallist 0 rabitmq&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZRANGEBYSCORE tutoriallist 0 1000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;rabitmq&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Redis键&quot;&gt;&lt;a href=&quot;#Redis键&quot; class=&quot;headerlink&quot; title=&quot;Redis键&quot;&gt;&lt;/a&gt;Redis键&lt;/h3&gt;&lt;p&gt;Redis 中的 keys 命令用于管理 redis 中的键。Redis keys命令使用的语法如下所示：   &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; COMMAND KEY_NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;示例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SET yiibai redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; DEL yiibai&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在上面的例子中 DEL 是一个命令，而 yiibai 是一个键。如果键被成功删除，则该命令的输出将是（整数）1，否则这将是（整数）0；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Redis字符串&quot;&gt;&lt;a href=&quot;#Redis字符串&quot; class=&quot;headerlink&quot; title=&quot;Redis字符串&quot;&gt;&lt;/a&gt;Redis字符串&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Redis 的字符串命令用于管理 redis 的字符串值。Redis 的字符串命令语法的使用如下所示：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;语法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; COMMAND KEY_NAME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;示例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SET yiibai redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; GET yiibai&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;redis&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在上面示例中 SET 和 GET 是 Redis 的命令，这里 yiibai 就是一个键（key）；&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Redis哈希&quot;&gt;&lt;a href=&quot;#Redis哈希&quot; class=&quot;headerlink&quot; title=&quot;Redis哈希&quot;&gt;&lt;/a&gt;Redis哈希&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Redis哈希是字符串字段和字符串值之间的映射，所以它是用来表示对象的一个完美的数据类型，Redis 的哈希值最多可存储超过4十亿字段-值对。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;示例&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; HMSET yiibai name &amp;quot;redis tutorial&amp;quot; description &amp;quot;redis basic commands for caching&amp;quot; likes 20 visitors 23000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; HGETALL yiibai&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;name&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;redis tutorial&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;description&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4) &amp;quot;redis basic commands for caching&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5) &amp;quot;likes&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6) &amp;quot;20&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7) &amp;quot;visitors&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8) &amp;quot;23000&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;在上面的例子，我们在设置一个名为 yiibai Redis的哈希的教程详细信息（name, description, likes, visitors）。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Redis列表&quot;&gt;&lt;a href=&quot;#Redis列表&quot; class=&quot;headerlink&quot; title=&quot;Redis列表&quot;&gt;&lt;/a&gt;Redis列表&lt;/h3&gt;&lt;p&gt;Redis列表是简单的字符串列表，通过插入顺序排序。您可以在Redis 列表的头或列表尾添加元素。列表的最大长度为  232 - 1 个元素（4294967295，每个列表可有超过四十亿个元素）。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; LPUSH tutorials redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; LPUSH tutorials mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; LPUSH tutorials mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; LRANGE tutorials 0 10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;mysql&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中的三个值由命令LPUSH 插入到 redis 名称为 tutorials 的列表。&lt;/p&gt;
&lt;h3 id=&quot;Redis集合&quot;&gt;&lt;a href=&quot;#Redis集合&quot; class=&quot;headerlink&quot; title=&quot;Redis集合&quot;&gt;&lt;/a&gt;Redis集合&lt;/h3&gt;&lt;p&gt;Redis集合是唯一字符串的无序集合。唯一集合是不允许数据有重复的键的。在 Redis 集合中添加，删除和测试成会是否存的时间复杂度为O（1）（恒定的时间，无论集合内包含元素的数量）。集合的最大长度为   232 - 1 个元素（4294967295，每个集合中超过四十亿个元素）。&lt;br&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SADD yiibai redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SADD yiibai mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SADD yiibai mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SADD yiibai mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; SMEMBERS yiibai&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;mysql&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在上面的例子中的三个值被 Redis 的命令SADD插入到一个名为 yiibai 集合。&lt;/p&gt;
&lt;h3 id=&quot;Redis有序集合&quot;&gt;&lt;a href=&quot;#Redis有序集合&quot; class=&quot;headerlink&quot; title=&quot;Redis有序集合&quot;&gt;&lt;/a&gt;Redis有序集合&lt;/h3&gt;&lt;p&gt;Redis的有序集合类似于 Redis 的集合，但是存储的值在集合中具有唯一性。另外有序集合的每个成员都使用分值（score）的东西，这个分值就是用于将有序集合排序，从分值最小到最大来排序。&lt;br&gt;在 Redis 有序集合添加，删除和测试成员的存在的时间复杂度为 O（1）（恒定时间，无论集合内包含元素的数量）。列表的最大长度为 232 - 1 个元素（4294967295，每个集合的元素超过四十亿）。&lt;/p&gt;
&lt;p&gt;示例&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZADD yiibai 1 redis&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZADD yiibai 2 mongodb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZADD yiibai 3 mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZADD yiibai 3 mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZADD yiibai 4 mysql&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; ZRANGE yiibai 0 10 WITHSCORES&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2) &amp;quot;1&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3) &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4) &amp;quot;2&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5) &amp;quot;mysql&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6) &amp;quot;4&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。&lt;/p&gt;
&lt;p&gt;在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。&lt;/p&gt;
&lt;p&gt;示例&lt;br&gt;下面的例子说明了 HyperLogLog Redis 的工作原理：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; PFADD tutorials &amp;quot;redis&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) (integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; PFADD tutorials &amp;quot;mongodb&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) (integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; PFADD tutorials &amp;quot;mysql&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1) (integer) 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;redis 127.0.0.1:6379&amp;gt; PFCOUNT tutorials&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(integer) 3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作数据库，高速缓存和消息队列代理。它支持字符串、哈希表、列表、集合、有序集合，位图，hyperloglogs等数据类型。内置复制、Lua脚本、LRU收回、事务以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。&lt;br&gt;
    
    </summary>
    
      <category term="DB" scheme="https://iceziyao.github.io/categories/DB/"/>
    
    
      <category term="redis" scheme="https://iceziyao.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>初探node.js</title>
    <link href="https://iceziyao.github.io/2016/05/06/%E5%89%8D%E7%AB%AF/nodejs/"/>
    <id>https://iceziyao.github.io/2016/05/06/前端/nodejs/</id>
    <published>2016-05-06T13:49:33.000Z</published>
    <updated>2016-08-06T14:49:13.900Z</updated>
    
    <content type="html">&lt;h3 id=&quot;什么是node-js&quot;&gt;&lt;a href=&quot;#什么是node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是node.js&quot;&gt;&lt;/a&gt;什么是node.js&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;node.js != Javascript&lt;br&gt;事实上，Node.js采用C++语言编写而成，是一个Javascript的运行环境。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 是构建于Chrome的JavaScript引擎的&lt;br&gt;Google的浏览器Chrome，有一个非常快速的JavaScript引擎，叫做V8。这个JS引擎可以被独立出来，该解释器拥有另一个独特特征；可以下载该引擎并将其嵌入任何 应用程序。Node.js就是建立在V8之上的。这也是为什么Node.js会运行的如此之快。对于开发者来说，有几个好处：&lt;ul&gt;
&lt;li&gt;js完全通用&lt;/li&gt;
&lt;li&gt;v8的发展影响着node.js&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js 不仅仅是一个网页服务器或者平台&lt;br&gt;Node.js 不是以网页为中心的。Node.js 是通用目的的JS运行时，带有很多功能强大的库。其中有一个库提供了 HTTP/HTTPS 的实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Node.js是面向对象的&lt;br&gt;Node.js的实质就是用Javascript的代码规范通过C++进行了实现和封装。一般在前端用js时，无非是ajax以及特效，仅仅针对一个页面。所以，不用面向对象也可以完成，但在后台，我们常用一些代码，所以进行封装，等用的时候新建一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node.js能做什么？&lt;br&gt;正如 JavaScript 为客户端而生，Node.js 为网络而生。Node.js 能做的远不止开发一个网站那么简单，使用 Node.js，你可以轻松地开发：  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 具有复杂逻辑的网站；&lt;br&gt; 基于社交网络的大规模 Web 应用；&lt;br&gt; Web Socket 服务器；&lt;br&gt; TCP/UDP 套接字应用程序；&lt;br&gt; 命令行工具；&lt;br&gt; 交互式终端程序；&lt;br&gt; 带有图形用户界面的本地应用程序；&lt;br&gt; 单元测试工具；&lt;br&gt; 客户端 JavaScript 编译器。  &lt;/p&gt;
&lt;p&gt;Node.js 内建了 HTTP 服务器支持，也就是说你可以轻而易举地实现一个网站和服务器的组合。这和 PHP、Perl 不一样，因为在使用 PHP 的时候，必须先搭建一个 Apache 之类的HTTP 服务器，然后通过 HTTP 服务器的模块加载或 CGI 调用，才能将 PHP 脚本的执行结果呈现给用户。而当你使用 Node.js 时，不用额外搭建一个 HTTP 服务器，因为 Node.js 本身就内建了一个。这个服务器不仅可以用来调试代码，而且它本身就可以部署到产品环境，它的性能足以满足要求。&lt;br&gt;Node.js 还可以部署到非网络应用的环境下，比如一个命令行工具  。Node.js 还可以调用C/C++ 的代码，这样可以充分利用已有的诸多函数库，也可以将对性能要求非常高的部分用C/C++ 来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;node.js的原理  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程&lt;/li&gt;
&lt;li&gt;异步非阻塞&lt;/li&gt;
&lt;li&gt;事件驱动&lt;br&gt;用高并发解释  &lt;blockquote&gt;
&lt;p&gt;一般来说，高并发解决方案会提供多线程模型，为每个业务逻辑提供一个线程，通过系统线程切换来来弥补同步I/O调用的时间开销。node.js使用的是单线程模型，对所有I/O都采用异步的请求方式，避免频繁的上下文切换，在node.js执行的时候维护着一个事件队列；程序在执行时进入事件循环等待下一个事件到来，每个异步I/O请求完成后都会被推送到事件队列中的等待执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例子：&lt;br&gt;对于一个简单的数据库访问操作，传统方式是这样实现的   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;res = db.query(&amp;apos;SELECT * from some_table&amp;apos;);
res.output();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码执行到第一行的时候线程会阻塞，等待query返回结果，然后继续处理。由于数据库查询、磁盘读写、网络通信等原因（所谓的I/O）阻塞时间会非常大（相对于CPU始终频率）。对于高并发的访问，一方面线程长期阻塞等待，另一方面为了应付新情求而不断添加新线程，会浪费大量系统资源，同时线程的增加也会也会占用大量的CPU时间来处理内存上下文切换。&lt;br&gt;node.js的处理方式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db.query(&amp;apos;SELECT * from some_table&amp;apos;，function(res) {   
        res.output();  
});  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;query的第二个参数是一个回调函数，进程执行到db.query的时候不会等待结果返回，而是直接继续执行下面的语句，直到进入事件循环。当数据库执行结果返回的时候会将事件发送到事件队列，等到线程进入事件循环后才会调用之前的回调函数。&lt;br&gt;node.js的异步机制是基于事件的，所有的I/O、网络通信、数据库查询都以非阻塞的方式执行，返回结果由事件循环来处理。node.js在同一时刻只会处理一个事件，完成后立即进入事件循环检查后面事件。这样CPU和内存在同一时间集中处理一件事，同时尽量让耗时的I/O等操作并行执行。   &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;事件循环机制&lt;br&gt;所谓事件循环是指node.js会把所有的异步操作使用事件机制解决，有个线程在不断地循环检测事件队列。&lt;br&gt;node.js中所有的逻辑都是事件的回调函数，所以node.js始终在事件循环中，程序入口就是事件循环第一个事件的回调函数。事件的回调函数中可能会发出I/O请求或直接发射（ emit）事件，执行完毕后返回事件循环。事件循环会检查事件队列中有没有未处理的事件，直到程序结束。node.js的事件循环对开发者不可见，由libev库实现，libev不断检查是否有活动的、可供检测的事件监听器，直到检查不到时才退出事件循环，程序结束。   &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;node.js的优缺点&lt;ul&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;简单&lt;/li&gt;
&lt;li&gt;高性能，避免了频繁的线程切换开销，一个线程而已&lt;/li&gt;
&lt;li&gt;占用资源小，因为是单线程，在大负荷情况下，对内存占用仍然很低&lt;/li&gt;
&lt;li&gt;线程安全，没有加锁、解锁、死锁这些问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：&lt;ul&gt;
&lt;li&gt;CPU密集型任务存在短板&lt;br&gt;  事件循环机制，处理所有的请求。在事件处理过程中，它会智能地将一些涉及到IO、网络通信等耗时比较长的操作，交由worker threads去执行，执行完了再回调。但是，那些非IO操作，只用CPU计算的操作，就只能自己抗了。&lt;/li&gt;
&lt;li&gt;无法利用CPU的多核&lt;br&gt;  Node.js是单线程程序，它只有一个event loop，也只占用一个CPU/内核。&lt;/li&gt;
&lt;li&gt;如果有异常抛出，因为是单线程，整个项目将不可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是node-js&quot;&gt;&lt;a href=&quot;#什么是node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是node.js&quot;&gt;&lt;/a&gt;什么是node.js&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;node.js != Javascript&lt;br&gt;事实上，Node.js采用C++语言编写而成，是一个Javascript的运行环境。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Node.js 是构建于Chrome的JavaScript引擎的&lt;br&gt;Google的浏览器Chrome，有一个非常快速的JavaScript引擎，叫做V8。这个JS引擎可以被独立出来，该解释器拥有另一个独特特征；可以下载该引擎并将其嵌入任何 应用程序。Node.js就是建立在V8之上的。这也是为什么Node.js会运行的如此之快。对于开发者来说，有几个好处：&lt;ul&gt;
&lt;li&gt;js完全通用&lt;/li&gt;
&lt;li&gt;v8的发展影响着node.js
    
    </summary>
    
      <category term="后台" scheme="https://iceziyao.github.io/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="node.js" scheme="https://iceziyao.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>python编写一个端口扫描器</title>
    <link href="https://iceziyao.github.io/2016/05/01/Python/python%E7%AB%AF%E5%8F%A3/"/>
    <id>https://iceziyao.github.io/2016/05/01/Python/python端口/</id>
    <published>2016-04-30T16:00:00.000Z</published>
    <updated>2016-08-06T14:49:31.890Z</updated>
    
    <content type="html">&lt;h3 id=&quot;编写一个端口扫描器&quot;&gt;&lt;a href=&quot;#编写一个端口扫描器&quot; class=&quot;headerlink&quot; title=&quot;编写一个端口扫描器&quot;&gt;&lt;/a&gt;编写一个端口扫描器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;任何一个靠谱的网络攻击，都是起步于侦察。所以攻击服务器，也就是检查服务的漏洞。我使用的两种方式无非是web注入和端口扫描。所以先编写一个端口扫描器&lt;/li&gt;
&lt;li&gt;端口扫描是基于TCP的，一共分为三个步骤，分别编写三个方法：  &lt;ul&gt;
&lt;li&gt;处理数据，也就是处理用户输入数据的，此处我们定义为main函数，用来获取主机名和端口  &lt;/li&gt;
&lt;li&gt;将主机名转换为对应的IPv4互联网地址，采socket.gethostbyname(hostname),获取到IP,然后调用处理端口扫描的函数.定义为portScan(tgtHost,tgtPorts)&lt;/li&gt;
&lt;li&gt;端口扫描，也是就TCP的全连接，对目标地址和端口进行连接。最后为了确定该端口上运行的什么服务，我们还会发送垃圾信息，并读取返回的Banner.函数定义为connScan(tgtHost,tgtPort)&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;实现端口扫描器&quot;&gt;&lt;a href=&quot;#实现端口扫描器&quot; class=&quot;headerlink&quot; title=&quot;实现端口扫描器&quot;&gt;&lt;/a&gt;实现端口扫描器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;main函数&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;def main():&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    parser = optparse.OptionParser(&amp;quot;usage: %prog&amp;quot; + \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;-H &amp;lt;tgtHost host&amp;gt; -P &amp;lt;tgtPort&amp;gt;&amp;quot; ,version=&amp;quot;%prog 1.0&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;&amp;apos;&amp;apos; 添加命令行参 &amp;apos;&amp;apos;&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    parser.add_option(&amp;apos;-H&amp;apos;,dest=&amp;apos;Host&amp;apos;,type=&amp;apos;string&amp;apos;,help=&amp;apos;specify target host&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    parser.add_option(&amp;apos;-P&amp;apos;,dest=&amp;apos;Port&amp;apos;,type=&amp;apos;string&amp;apos;,\&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    help=&amp;apos;specify target port[s] separated by command&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    (options ,args) = parser.parse_args()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tgtHost = options.Host&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    tgtPorts = str(options.Port).split(&amp;quot;,&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if (tgtHost == None) or (tgtPorts[0] == None):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;[-] You must specify a target host and port[s]&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exit(0)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    portScan(tgtHost,tgtPorts)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2. portScan(tgtHost,tgtPorts)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def portScan(tgtHost,tgtPorts):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      tgtIP = gethostbyname(tgtHost)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      print &amp;quot;[-] cannot resolve &amp;apos;%s&amp;apos;:Unknown host&amp;quot; %(tgtHost)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      tgtName = gethostbyaddr(tgtIP)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      print &amp;apos;\n[+] Scan Reselts for:&amp;apos; + tgtName[0]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      print &amp;apos;\n[+] Scan Results for: &amp;apos;+ tgtIP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setdefaulttimeout(1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for tgtPort in tgtPorts:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      connScan(tgtHost,tgtPort)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3. connScan(tgtHost, tgtPort)  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def connScan(tgtHost, tgtPort):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt = socket(AF_INET,SOCK_STREAM)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.connect((tgtHost,tgtPort))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.send(&amp;apos;Hello\r\n&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        results = connSkt.recv(100)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.acquire()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[+]%d/TCP open&amp;quot; %(tgtPort)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[+] &amp;quot;+str(results)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.acquire()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[-]%d/TCP closed&amp;quot; %(tgtPort)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    finally:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.release()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.close()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;br&gt;运行后如下结果  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python portscanner.py -H localhost -P 21,22&lt;br&gt;[+] Scan Reselts for:localhost&lt;br&gt;[+]22/TCP open&lt;br&gt;[+] SSH-2.0-OpenSSH_6.4&lt;br&gt;[+]21/TCP open&lt;br&gt;[+] 220 (vsFTPd 3.0.2)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;优化&quot;&gt;&lt;a href=&quot;#优化&quot; class=&quot;headerlink&quot; title=&quot;优化&quot;&gt;&lt;/a&gt;优化&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;线程优化&lt;br&gt;采用多线程扫描  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;for tgtPort in tgtPorts:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t=threading.Thread(target=connScan,args=(tgtIP,int(tgtPort)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    t.start()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这让扫描速度有了很大改进，但又是一个缺点，多个线程同时打印输出，可能出现乱码和失序。我们需要一个信号量来控制，这样代码就会变成这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import threading&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import multiprocessing&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;lock = multiprocessing.Semaphore(value=1) #锁&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def connScan(tgtHost, tgtPort):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt = socket(AF_INET,SOCK_STREAM)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.connect((tgtHost,tgtPort))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.send(&amp;apos;Hello\r\n&amp;apos;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        results = connSkt.recv(100)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.acquire()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[+]%d/TCP open&amp;quot; %(tgtPort)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[+] &amp;quot;+str(results)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.acquire()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[-]%d/TCP closed&amp;quot; %(tgtPort)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    finally:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        lock.release()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        connSkt.close()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def portScan(tgtHost,tgtPorts):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tgtIP = gethostbyname(tgtHost)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;quot;[-] cannot resolve &amp;apos;%s&amp;apos;:Unknown host&amp;quot; %(tgtHost)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    try:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        tgtName = gethostbyaddr(tgtIP)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;\n[+] Scan Reselts for:&amp;apos; + tgtName[0]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    except:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print &amp;apos;\n[+] Scan Results for: &amp;apos;+ tgtIP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setdefaulttimeout(1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for tgtPort in tgtPorts:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        #print &amp;apos;Scanning port &amp;apos; + tgtPort&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t=threading.Thread(target=connScan,args=(tgtIP,int(tgtPort)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        t.start()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整代码请参考&lt;a href=&quot;https://github.com/iceziYao/Grocery/blob/master/portscanner.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;portscanner.py&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用nmap端口扫描代码&lt;br&gt;2.1 下载Python-Nmap&lt;br&gt;&lt;code&gt;pip install Python-Nmap&lt;/code&gt;&lt;br&gt;2.2 实现&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import nmap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import optparse&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;from socket import *&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import os,sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;def nmapScan(tgtHost,tgtPort):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      nmScan = nmap.PortScanner()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      nmScan.scan(tgtHost,tgtPort)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      status = nmScan[tgtHost][&amp;apos;tcp&amp;apos;][int(tgtPort)][&amp;apos;state&amp;apos;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      print &amp;apos;[!] %s tcp/%s %s&amp;apos; %(tgtHost,tgtPort,status)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;详细代码查看&lt;a href=&quot;https://github.com/iceziYao/Grocery/blob/master/nmapport.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nmapport.py&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;编写一个端口扫描器&quot;&gt;&lt;a href=&quot;#编写一个端口扫描器&quot; class=&quot;headerlink&quot; title=&quot;编写一个端口扫描器&quot;&gt;&lt;/a&gt;编写一个端口扫描器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;任何一个靠谱的网络攻击，都是起步于侦察。所以攻击服务器，也就是检查服务的漏洞。我使用的两种方式无非是web注入和端口扫描。所以先编写一个端口扫描器&lt;/li&gt;
&lt;li&gt;端口扫描是基于TCP的，一共分为三个步骤，分别编写三个方法：  &lt;ul&gt;
&lt;li&gt;处理数据，也就是处理用户输入数据的，此处我们定义为main函数，用来获取主机名和端口  &lt;/li&gt;
&lt;li&gt;将主机名转换为对应的IPv4互联网地址，采socket.gethostbyname(hostname),获取到IP,然后调用处理端口扫描的函数.定义为portScan(tgtHost,tgtPorts)&lt;/li&gt;
&lt;li&gt;端口扫描，也是就TCP的全连接，对目标地址和端口进行连接。最后为了确定该端口上运行的什么服务，我们还会发送垃圾信息，并读取返回的Banner.函数定义为connScan(tgtHost,tgtPort)
    
    </summary>
    
      <category term="Python" scheme="https://iceziyao.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://iceziyao.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现ping</title>
    <link href="https://iceziyao.github.io/2016/04/06/C/bin/C_ping/"/>
    <id>https://iceziyao.github.io/2016/04/06/C/bin/C_ping/</id>
    <published>2016-04-05T16:00:00.000Z</published>
    <updated>2016-09-12T20:27:07.144Z</updated>
    
    <content type="html">&lt;p&gt;学习C网络编程笔记&lt;/p&gt;
&lt;h1 id=&quot;ping-命令&quot;&gt;&lt;a href=&quot;#ping-命令&quot; class=&quot;headerlink&quot; title=&quot;ping 命令&quot;&gt;&lt;/a&gt;ping 命令&lt;/h1&gt;&lt;h2 id=&quot;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot;&gt;&lt;a href=&quot;#ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot; class=&quot;headerlink&quot; title=&quot;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot;&gt;&lt;/a&gt;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ping www.baidu.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PING www.a.shifen.com (180.97.33.107) 56(84) bytes of data.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64 bytes from 180.97.33.107: icmp_seq=1 ttl=50 time=42.2 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64 bytes from 180.97.33.107: icmp_seq=2 ttl=50 time=37.4 ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;ping与ICMP&quot;&gt;&lt;a href=&quot;#ping与ICMP&quot; class=&quot;headerlink&quot; title=&quot;ping与ICMP&quot;&gt;&lt;/a&gt;ping与ICMP&lt;/h2&gt;&lt;p&gt;要真正了解 ping 命令实现原理，就要了解 ping 命令所使用到的 TCP/IP 协议：ICMP 协议。&lt;br&gt;ICMP 是（Internet Control Message Protocol）Internet 控制报文协议。它是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息。&lt;br&gt;控制消息有：目的不可达消息，超时信息，重定向消息，时间戳请求和时间戳响应消息，回显请求和回显应答消息。&lt;br&gt;ping 命令使用回显请求和回显应答消息。具体表现是向网络上的另一个主机系统发送 ICMP 报文，如果指定系统得到了报文，它将把报文一模一样地传回给发送者。&lt;br&gt;回显请求报文其中类型为 0，代码为 0。&lt;br&gt;回显应答报文其中类型为 8，代码为 0。&lt;br&gt;校验和字段：包括数据在内的整个 ICMP 协议数据包的校验和，具体实现方法会在下面详细介绍。&lt;br&gt;标识符字段：用于唯一标识 ICMP 报文，本项目使用程序的进程 id。因为如果同时在两个命令行终端执行 ping 命令的话，每个 ping 命令都会接收到所有的回显应答，所以需要根据标识符来判断回显应答是否应该接收。&lt;br&gt;序号字段：ICMP 报文的序号。&lt;br&gt;数据字段：也就是报文，本项目中我们将发送报文的时间戳放入数据字段，这样当接收到该报文应答的时候可以取出发送时间戳，将接收应答的时间戳减去发送时间戳就是报文往返时间（rtt）。提前预告一下，这里使用gettimeofday()API函数获取时间戳，详细介绍会在函数介绍部分说明。&lt;/p&gt;
&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h2&gt;&lt;p&gt;ICMP 报文 C 语言实现可以用下面的数据结构表示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct icmp&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char   type;         // 类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char   code;         // 代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        unsigned short  checksum;     // 校验和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        unsigned short  id;            // 标识符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        unsigned short  sequence;     // 序号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        struct timeval  timestamp;    // 时间戳&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;系统发送ICMP报文时会将ICMP报文作为IP的数据，也就是放入IP报文格式的数据字段  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;```+C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct ip&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char version:4;       // 版本&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char hlen:4;        // 首部长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char tos;             // 服务类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned short len;         // 总长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned short id;            // 标识符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned short offset;        // 标志和片偏移&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char ttl;            // 生存时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned char protocol;     // 协议&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned short checksum;    // 校验和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr ipsrc;        // 32位源ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr ipdst;       // 32位目的ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;地址信息表示&quot;&gt;&lt;a href=&quot;#地址信息表示&quot; class=&quot;headerlink&quot; title=&quot;地址信息表示&quot;&gt;&lt;/a&gt;地址信息表示&lt;/h2&gt;&lt;p&gt;当我们编写网络应用程序时，必然要使用地址信息指定数据传输给网络上哪个主机，那么地址信息应该包含哪些呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;地址族，基于IPv4的地址族还是IPv6的地址族。&lt;/li&gt;
&lt;li&gt;IP地址。&lt;/li&gt;
&lt;li&gt;端口号。&lt;br&gt;为了便于记录地址信息，系统定义了如下结构体：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct sockaddr_in&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sa_family_t        sin_family;     // 地址族&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    uint16_t        sin_port;        // 端口号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr  sin_addr;          // 32位IP地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char             sin_zero[8];    // 不使用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中struct in_addr定义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct in_addr&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    in_addr_t     s_addr;        // 32位IP地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;in_addr_t使用如下宏指令定义，也就是无符号整型32位。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#define in_addr_t uint32_t&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但实际上，还有一种结构体也可以表示地址信息，如下所示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct sockaddr&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sa_family_t    sin_family;     // 地址族&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char         sa_data[14]; // IP地址和端口&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;成员sa_data保存的信息包含IP地址和端口号，剩余部分填充0。&lt;br&gt;在网络编程中，常用的是struct sockaddr_in结构体，因为相对于struct sockaddr结构体，前者填充数据比较方便。&lt;br&gt;不过网络编程接口函数定义使用的是struct sockaddr结构体类型，这是由于最先使用的是struct sockaddr结构体，struct sockaddr_in结构体是后来为了方便填充地址信息数据定义。这就出现矛盾了，不过也不用担心上面两个结构体之间是可以相互转换的。定义地址信息时使用struct sockaddr_in结构体，然后将该结构体类型转为struct sockaddr结构体类型传递给网络编程接口函数即可。  &lt;/p&gt;
&lt;h2 id=&quot;相关函数&quot;&gt;&lt;a href=&quot;#相关函数&quot; class=&quot;headerlink&quot; title=&quot;相关函数&quot;&gt;&lt;/a&gt;相关函数&lt;/h2&gt;&lt;h4 id=&quot;gettimeofday&quot;&gt;&lt;a href=&quot;#gettimeofday&quot; class=&quot;headerlink&quot; title=&quot;gettimeofday()&quot;&gt;&lt;/a&gt;gettimeofday()&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int gettimeofday(struct timeval *tv, struct timezone *tz);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数的作用是把当前的时间放入struct timeval结构体中返回。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.精确级别,微妙级别  &lt;/p&gt;
&lt;p&gt;2.受系统时间修改影响  &lt;/p&gt;
&lt;p&gt;3.返回的秒数是从1970年1月1日0时0分0秒开始  &lt;/p&gt;
&lt;p&gt;其参数tv是保存获取时间结果的结构体，参数tz用于保存时区结果。  &lt;/p&gt;
&lt;p&gt;结构体timeval的定义为：  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct timeval&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    long int tv_sec;      // 秒数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    long int tv_usec;     // 微秒数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结构体timezone的定义为：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct timezone&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int tz_minuteswest;/*格林威治时间往西方的时差*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int tz_dsttime;    /*DST 时间的修正方式*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;timezone 参数若不使用则传入0即可，本项目传入0。  &lt;/p&gt;
&lt;h4 id=&quot;inet-addr函数。&quot;&gt;&lt;a href=&quot;#inet-addr函数。&quot; class=&quot;headerlink&quot; title=&quot;inet_addr函数。&quot;&gt;&lt;/a&gt;inet_addr函数。&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;in_addr_t inet_addr(const char *string);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数的作用是将用点分十进制字符串格式表示的IP地址转换成32位大端序整型。&lt;br&gt;成功时返回32位大端序整型数值，失败时返回INADDR_NONE。&lt;/p&gt;
&lt;h4 id=&quot;gethostbyname&quot;&gt;&lt;a href=&quot;#gethostbyname&quot; class=&quot;headerlink&quot; title=&quot;gethostbyname&quot;&gt;&lt;/a&gt;gethostbyname&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;netdb.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct hostent * gethostbyname(const char * hostname);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该函数的作用是根据域名获取IP地址。&lt;br&gt;成功时返回hostent结构体地址，失败时返回NULL指针。&lt;br&gt;struct hosten结构体定义如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;struct hostent&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char *          h_name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char **     h_aliases;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char         h_addrtype;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char         h_length;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    char **     h_addr_list;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们最关心的是h_addr_list成员，它保存的就是域名对应IP地址。由于一个域名对应的IP地址不止一个，所以h_addr_list成员是char **类型，相当于二维字符数组。&lt;/p&gt;
&lt;h4 id=&quot;socket。&quot;&gt;&lt;a href=&quot;#socket。&quot; class=&quot;headerlink&quot; title=&quot;socket。&quot;&gt;&lt;/a&gt;socket。&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int socket(int family, int type, int protocol);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;校验&quot;&gt;&lt;a href=&quot;#校验&quot; class=&quot;headerlink&quot; title=&quot;校验&quot;&gt;&lt;/a&gt;校验&lt;/h1&gt;&lt;p&gt;检验和算法可以分成两步来实现。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在发送端，有以下三步： 1.把校验和字段置为0。&lt;/li&gt;
&lt;li&gt;对需要校验的数据看成以16bit为单位的数字组成，依次进行二进制求和。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将上一步的求和结果取反，存入校验和字段。&lt;br&gt;其次在接收端，也有相应的三步：  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对需要校验的数据看成以16bit为单位的数字组成，依次进行二进制求和，包括校验和字段。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将上一步的求和结果取反。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断最终结果是否为0。如果为0，说明校验和正确。如果不为0，则协议栈会丢掉接收到的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上可以看出，归根到底，校验和算法就是二进制反码求和。由于先取反后相加与先相加后取反，得到的结果是一样的，所以上面的步骤都是先求和后取反。&lt;/p&gt;
&lt;p&gt;下面用C语言来实现校验和算法，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * addr 指向需校验数据缓冲区的指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * len  需校验数据的总长度（字节单位）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;unsigned short checkSum(unsigned short *addr, int len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unsigned int sum = 0;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    while(len &amp;gt; 1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sum += *addr++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        len -= 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 处理剩下的一个字节&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if(len == 1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sum += *(unsigned char *)addr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 将32位的高16位与低16位相加&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sum = (sum &amp;gt;&amp;gt; 16) + (sum &amp;amp; 0xffff);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sum += (sum &amp;gt;&amp;gt; 16);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return (unsigned short) ~sum;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面的代码首先定义了一个32位无符号整型的变量sum，用来保存16bit二进制数字相加的结果，由于16bit相加可能会产生进位，所以这里使用32位变量来保存结果，其中高16bit保存的是相加产生的进位。&lt;/p&gt;
&lt;p&gt;然后下面的while循环，对数据按16bit累加求和。&lt;/p&gt;
&lt;p&gt;接下来的if语句判断是否还剩下8bit（一字节）。如果校验的数据为奇数个字节，会剩下最后一字节。把最后一个字节视为一个2字节数据的高字节，这个2字节数据的低字节为0，继续累加。&lt;/p&gt;
&lt;p&gt;之后的两行代码作用是将sum高16bit的值加到低16bit上，即把累加中最高位的进位加到最低位上。（sum &amp;gt;&amp;gt; 16）将高16bit右移到低16bit，（sum &amp;amp; 0xffff）将高16bit全部置为0。注意，这两步都不会改变sum原来的值。&lt;/p&gt;
&lt;p&gt;进行了两次相加可以保证sum高16bit都为0，没有进位了。&lt;/p&gt;
&lt;p&gt;最后取反，并返回。&lt;/p&gt;
&lt;h1 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h1&gt;&lt;p&gt;第一步，首先创建原始套接字。&lt;/p&gt;
&lt;p&gt;第二步，封装ICMP报文，向目的IP地址发送ICMP报文，1秒后接收ICMP响应报文，并打印TTL，RTT。&lt;/p&gt;
&lt;p&gt;第三步：循环第二步N次，本项目设置为5。&lt;/p&gt;
&lt;p&gt;第四步输出统计信息。&lt;br&gt;完整代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;119&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;120&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;122&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;123&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;124&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;125&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;126&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;127&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;128&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;129&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;130&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;131&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;132&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;133&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;134&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;135&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;136&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;137&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;138&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;139&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;140&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;141&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;142&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;143&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;144&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;145&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;146&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;147&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;148&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;149&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;150&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;151&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;152&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;153&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;154&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;155&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;156&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;157&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;158&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;159&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;160&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;161&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;162&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;163&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;164&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;166&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;167&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;168&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;169&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;170&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;171&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;172&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;173&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;174&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;175&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;176&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;177&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;178&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;179&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;180&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;181&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;182&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;183&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;184&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;185&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;186&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;187&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;188&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;189&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;190&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;191&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;192&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;193&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;194&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;195&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;196&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;197&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;198&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;199&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;200&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;201&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;202&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;203&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;204&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;205&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;206&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;207&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;208&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;209&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;210&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;211&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;212&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;213&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;214&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;215&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;216&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;217&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;218&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;219&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;220&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;221&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;222&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;223&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;224&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;225&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;226&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;227&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;228&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;229&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;230&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;231&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;232&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;233&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;234&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;235&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;236&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;string.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;sys/time.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;netdb.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define ICMP_SIZE (sizeof(struct icmp))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define ICMP_ECHO 8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define ICMP_ECHOREPLY 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define BUF_SIZE 1024&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define NUM   5    // 发送报文次数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define UCHAR  unsigned char&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define USHORT unsigned short&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#define UINT   unsigned int&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// ICMP报文数据结构&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct icmp&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR           type;      // 类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR           code;      // 代码&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT          checksum;  // 校验和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT          id;        // 标识符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT          sequence;  // 序号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct timeval  timestamp; // 时间戳&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// IP首部数据结构&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;struct ip&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 主机字节序判断&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #if __BYTE_ORDER == __LITTLE_ENDIAN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   hlen:4;        // 首部长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   version:4;     // 版本      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #endif&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #if __BYTE_ORDER == __BIG_ENDIAN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   version:4;       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   hlen:4;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #endif    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   tos;             // 服务类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT  len;             // 总长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT  id;                // 标识符&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT  offset;            // 标志和片偏移&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   ttl;            // 生存时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UCHAR   protocol;       // 协议&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    USHORT  checksum;       // 校验和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr ipsrc;    // 32位源ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct in_addr ipdst;   // 32位目的ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;char buf[BUF_SIZE] = &amp;#123;0&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;USHORT checkSum(USHORT *, int); // 计算校验和&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;float timediff(struct timeval *, struct timeval *); // 计算时间差&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void pack(struct icmp *, int);  // 封装一个ICMP报文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int unpack(char *, int, char *);        // 对接收到的IP报文进行解包&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int main(int argc, char * argv[])&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct hostent *host;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct icmp sendicmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct sockaddr_in from;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    struct sockaddr_in to;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int fromlen = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int sockfd;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int nsend = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int nreceived = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int i, n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    in_addr_t inaddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    memset(&amp;amp;from, 0, sizeof(struct sockaddr_in));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    memset(&amp;amp;to, 0, sizeof(struct sockaddr_in));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if(argc &amp;lt; 2)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        printf(&amp;quot;use : %s hostname/IP address \n&amp;quot;, argv[0]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exit(1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 生成原始套接字&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if((sockfd = socket(AF_INET, SOCK_RAW, IPPROTO_ICMP)) == -1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        printf(&amp;quot;socket() error \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        exit(1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 设置目的地址信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    to.sin_family = AF_INET;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 判断是域名还是ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if(inaddr = inet_addr(argv[1]) == INADDR_NONE)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 是域名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if((host = gethostbyname(argv[1])) == NULL)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            printf(&amp;quot;gethostbyname() error \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            exit(1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        to.sin_addr = *(struct in_addr *)host-&amp;gt;h_addr_list[0];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 是ip地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        to.sin_addr.s_addr = inaddr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 输出域名ip地址信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printf(&amp;quot;ping %s (%s) : %d bytes of data.\n&amp;quot;, argv[1], inet_ntoa(to.sin_addr), (int)ICMP_SIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //循环发送报文、接收报文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    for(i = 0; i &amp;lt; NUM; i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        nsend++;  // 发送次数加1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        memset(&amp;amp;sendicmp, 0, ICMP_SIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        pack(&amp;amp;sendicmp, nsend);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 发送报文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(sendto(sockfd, &amp;amp;sendicmp, ICMP_SIZE, 0, (struct sockaddr *)&amp;amp;to, sizeof(to)) == -1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            printf(&amp;quot;sendto() error \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // 接收报文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if((n = recvfrom(sockfd, buf, BUF_SIZE, 0, (struct sockaddr *)&amp;amp;from, &amp;amp;fromlen)) &amp;lt; 0)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            printf(&amp;quot;recvform() error \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            continue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        nreceived++;  // 接收次数加1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(unpack(buf, n, inet_ntoa(from.sin_addr)) == -1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            printf(&amp;quot;unpack() error \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sleep(1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 输出统计信息&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printf(&amp;quot;---  %s ping statistics ---\n&amp;quot;, argv[1]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printf(&amp;quot;%d packets transmitted, %d received, %%%d packet loss\n&amp;quot;, nsend, nreceived,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            (nsend - nreceived) / nsend * 100);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * addr 指向需校验数据缓冲区的指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * len  需校验数据的总长度（字节单位）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;USHORT checkSum(USHORT *addr, int len)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    UINT sum = 0;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    while(len &amp;gt; 1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sum += *addr++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        len -= 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 处理剩下的一个字节&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if(len == 1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sum += *(UCHAR *)addr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 将32位的高16位与低16位相加&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sum = (sum &amp;gt;&amp;gt; 16) + (sum &amp;amp; 0xffff);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sum += (sum &amp;gt;&amp;gt; 16);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return (USHORT) ~sum;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * 返回值单位：ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * begin 开始时间戳&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * end   结束时间戳&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;float timediff(struct timeval *begin, struct timeval *end)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    int n;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 先计算两个时间点相差多少微秒&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    n = ( end-&amp;gt;tv_sec - begin-&amp;gt;tv_sec ) * 1000000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        + ( end-&amp;gt;tv_usec - begin-&amp;gt;tv_usec );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // 转化为毫秒返回&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return (float) (n / 1000);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * icmp 指向需要封装的ICMP报文结构体的指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * sequence 该报文的序号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;void pack(struct icmp * icmp, int sequence)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;type = ICMP_ECHO;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;code = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;checksum = 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;id = getpid();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;sequence = sequence;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    gettimeofday(&amp;amp;icmp-&amp;gt;timestamp, 0);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    icmp-&amp;gt;checksum = checkSum((USHORT *)icmp, ICMP_SIZE);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * buf  指向接收到的IP报文缓冲区的指针&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * len  接收到的IP报文长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * addr 发送ICMP报文响应的主机IP地址&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int unpack(char * buf, int len, char * addr)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   int i, ipheadlen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   struct ip * ip;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   struct icmp * icmp;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   float rtt;          // 记录往返时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   struct timeval end; // 记录接收报文的时间戳&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ip = (struct ip *)buf;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 计算ip首部长度，即ip首部的长度标识乘4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ipheadlen = ip-&amp;gt;hlen &amp;lt;&amp;lt; 2;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 越过ip首部，指向ICMP报文&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   icmp = (struct icmp *)(buf + ipheadlen);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // ICMP报文的总长度&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   len -= ipheadlen;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 如果小于ICMP报文首部长度8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   if(len &amp;lt; 8)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        printf(&amp;quot;ICMP packets\&amp;apos;s length is less than 8 \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 确保是我们所发的ICMP ECHO回应&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   if(icmp-&amp;gt;type != ICMP_ECHOREPLY ||&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           icmp-&amp;gt;id != getpid())&amp;#123;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       printf(&amp;quot;ICMP packets are not send by us \n&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       return -1;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 计算往返时间&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   gettimeofday(&amp;amp;end, 0);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   rtt = timediff(&amp;amp;icmp-&amp;gt;timestamp, &amp;amp;end);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   // 打印ttl，rtt，seq&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   printf(&amp;quot;%d bytes from %s : icmp_seq=%u ttl=%d rtt=%fms \n&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           len, addr, icmp-&amp;gt;sequence, ip-&amp;gt;ttl, rtt);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   return 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;将上面代码写入ping.c文件中，编译执行。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;学习C网络编程笔记&lt;/p&gt;
&lt;h1 id=&quot;ping-命令&quot;&gt;&lt;a href=&quot;#ping-命令&quot; class=&quot;headerlink&quot; title=&quot;ping 命令&quot;&gt;&lt;/a&gt;ping 命令&lt;/h1&gt;&lt;h2 id=&quot;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot;&gt;&lt;a href=&quot;#ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot; class=&quot;headerlink&quot; title=&quot;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&quot;&gt;&lt;/a&gt;ping命令是用来查看网络上另一个主机系统的网络连接是否正常的一个工具。&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ping www.baidu.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PING www.a.shifen.com (180.97.33.107) 56(84) bytes of data.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64 bytes from 180.97.33.107: icmp_seq=1 ttl=50 time=42.2 ms&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64 bytes from 180.97.33.107: icmp_seq=2 ttl=50 time=37.4 ms&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C" scheme="https://iceziyao.github.io/categories/C/"/>
    
    
      <category term="Linux" scheme="https://iceziyao.github.io/tags/Linux/"/>
    
      <category term="C" scheme="https://iceziyao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅析docker实现思想</title>
    <link href="https://iceziyao.github.io/2016/04/04/Docker/docker02/"/>
    <id>https://iceziyao.github.io/2016/04/04/Docker/docker02/</id>
    <published>2016-04-03T16:00:00.000Z</published>
    <updated>2016-08-06T14:50:37.949Z</updated>
    
    <content type="html">&lt;h2 id=&quot;从虚拟化的种类和层级说起&quot;&gt;&lt;a href=&quot;#从虚拟化的种类和层级说起&quot; class=&quot;headerlink&quot; title=&quot;从虚拟化的种类和层级说起&quot;&gt;&lt;/a&gt;从虚拟化的种类和层级说起&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cpu虚拟化：可以模拟不同CPU，例如bochs&lt;/li&gt;
&lt;li&gt;完全虚拟化：只能模拟同样CPU，但是可以执行不同系统，例如vmware&lt;/li&gt;
&lt;li&gt;半虚拟化&lt;/li&gt;
&lt;li&gt;硬件虚拟化：可以当作获得硬件加速的完全虚拟化&lt;/li&gt;
&lt;li&gt;系统虚拟化：host和guest共享一样的内核，例如Openvz&lt;/li&gt;
&lt;li&gt;语言沙盒：只能在语言的范围内使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟化的级别越偏底层，速度越慢，用户越难察觉到虚拟化的存在。 虚拟化的级别越偏上层，速度越快，用户越容易感知。也就是虚拟幻的包装，如何一个虚拟化完全包装底层，呈现给用户一个新的操作系统，那么用户会知道他用的什么吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu虚拟化和完全虚拟化时，用户几乎可以阿不察觉到虚拟化的存在&lt;/li&gt;
&lt;li&gt;半虚拟化时，guest内核必须存在补丁&lt;ul&gt;
&lt;li&gt;系统虚拟化时，用户不能控制自己的内核&lt;/li&gt;
&lt;li&gt;语言沙盒时，用户没有使用api的自由&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;docker的原理&quot;&gt;&lt;a href=&quot;#docker的原理&quot; class=&quot;headerlink&quot; title=&quot;docker的原理&quot;&gt;&lt;/a&gt;docker的原理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;doceker实现结构&lt;br&gt;–&amp;gt;lxc&lt;br&gt;–&amp;gt;namespace: 仅沙盒隔离，不限制资源。&lt;br&gt;–&amp;gt;cgroup: 仅限制资源，不沙盒隔离。&lt;br&gt;–&amp;gt;aufs&lt;br&gt;–&amp;gt;image管理  &lt;/li&gt;
&lt;li&gt;底层技术&lt;blockquote&gt;
&lt;p&gt;Docker使用Go语言编写，并且使用了一系列Linux内核提供的性能来实现我们已经看到的这些功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;lxc&lt;blockquote&gt;
&lt;p&gt;LXC是Linux containers的简称，是一种基于容器的操作系统层级的虚拟化技术,linux原生支持的容器.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XC可以在操作系统层次上为进程提供的虚拟的执行环境，一个虚拟的执行环境就是一个容器。可以为容器绑定特定的cpu和memory节点，分配特定比例的cpu时间、IO时间，限制可以使用的内存大小（包括内存和是swap空间），提供device访问控制，提供独立的namespace（网络、pid、ipc、mnt、uts）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;命名空间(Namespaces)&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Docker充分利用了一项称为namespaces的技术来提供隔离的工作空间，我们称之为 container(容器)。当你运行一个容器的时候，Docker为该容器创建了一个命名空间集合。其实我们在c++也见过类似的namespace    &lt;/li&gt;
&lt;li&gt;这样提供了一个隔离层，每一个应用在它们自己的命名空间中运行而且不会访问到命名空间之外。&lt;br&gt;通俗来讲，就是给将每一个应用放在小房子的，也就是容器，使不同应用不会冲突。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一些Docker使用到的命名空间有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pid命名空间: 使用在进程隔离(PID: Process ID)。&lt;/li&gt;
&lt;li&gt;net命名空间: 使用在管理网络接口(NET: Networking&lt;/li&gt;
&lt;li&gt;ipc命名空间: 使用在管理进程间通信资源 (IPC: InterProcess Communication)&lt;/li&gt;
&lt;li&gt;mnt命名空间: 使用在管理挂载点 (MNT: Mount)。&lt;/li&gt;
&lt;li&gt;uts命名空间: 使用在隔离内核和版本标识 (UTS: Unix Timesharing System)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;群组控制(cgroup)&lt;blockquote&gt;
&lt;p&gt;Docker还使用到了cgroups技术来管理群组。使应用隔离运行的关键是让它们只使用你想要的资源。这样可以确保在机器上运行的容器都是良民(good multi-tenant citizens)。群组控制允许Docker分享或者限制容器使用硬件资源。例如，限制指定的容器的内容使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;联合文件系统(UnionFS)&lt;blockquote&gt;
&lt;p&gt;联合文件系统(UnionFS)是用来操作创建层的，使它们轻巧快速。Docker使用UnionFS提供容器的构造块。Docker可以使用很多种类的UnionFS包括AUFS, btrfs, vfs, and DeviceMapper。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么使用go语言实现docker&lt;br&gt;部署简单，依赖性小，开发效率高(相比C/C++)，性能好(相比JAVA)  &lt;/li&gt;
&lt;li&gt;docker与LXC的联系&lt;br&gt;在我理解，docker是LXC的一个高速引擎&lt;/li&gt;
&lt;li&gt;为什么我只解析了docker实现思想&lt;br&gt;我不会go语言，也不了解LXC，我只是一个使用者，只是在自己的理解下探讨docker实现了什么。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从虚拟化的种类和层级说起&quot;&gt;&lt;a href=&quot;#从虚拟化的种类和层级说起&quot; class=&quot;headerlink&quot; title=&quot;从虚拟化的种类和层级说起&quot;&gt;&lt;/a&gt;从虚拟化的种类和层级说起&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cpu虚拟化：可以模拟不同CPU，例如bochs&lt;/li&gt;
&lt;li&gt;完全虚拟化：只能模拟同样CPU，但是可以执行不同系统，例如vmware&lt;/li&gt;
&lt;li&gt;半虚拟化&lt;/li&gt;
&lt;li&gt;硬件虚拟化：可以当作获得硬件加速的完全虚拟化&lt;/li&gt;
&lt;li&gt;系统虚拟化：host和guest共享一样的内核，例如Openvz&lt;/li&gt;
&lt;li&gt;语言沙盒：只能在语言的范围内使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟化的级别越偏底层，速度越慢，用户越难察觉到虚拟化的存在。 虚拟化的级别越偏上层，速度越快，用户越容易感知。也就是虚拟幻的包装，如何一个虚拟化完全包装底层，呈现给用户一个新的操作系统，那么用户会知道他用的什么吗？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpu虚拟化和完全虚拟化时，用户几乎可以阿不察觉到虚拟化的存在&lt;/li&gt;
&lt;li&gt;半虚拟化时，guest内核必须存在补丁&lt;ul&gt;
&lt;li&gt;系统虚拟化时，用户不能控制自己的内核&lt;/li&gt;
&lt;li&gt;语言沙盒时，用户没有使用api的自由
    
    </summary>
    
      <category term="docker" scheme="https://iceziyao.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://iceziyao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>浅析docker使用</title>
    <link href="https://iceziyao.github.io/2016/04/03/Docker/docker01/"/>
    <id>https://iceziyao.github.io/2016/04/03/Docker/docker01/</id>
    <published>2016-04-02T16:00:00.000Z</published>
    <updated>2016-08-06T14:50:42.253Z</updated>
    
    <content type="html">&lt;h2 id=&quot;docker是什么？&quot;&gt;&lt;a href=&quot;#docker是什么？&quot; class=&quot;headerlink&quot; title=&quot;docker是什么？&quot;&gt;&lt;/a&gt;docker是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简单的说Docker是一个构建在LXC之上的,基于进程容器(Processcontainer)的轻量级VM解决方案&lt;br&gt;Docker的初衷也就是将各种应用程序和他们所依赖的运行环境打包成标准的Container/image,进而发布到不同的平台上运行。  也是由go写成的轻量级容器&lt;/li&gt;
&lt;li&gt;Docker container和普通的虚拟机Image相比, 最大的区别是它并不包含操作系统内核   &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;普通虚拟机将整个操作系统运行在虚拟的硬件平台上, 进而提供完整的运行环境供应用程序运行, 而Docker则直接在宿主平台上加载运行应用程序. 本质上他在底层使用LXC启动一个Linux Container,通过cgroup等机制对不同的container内运行的应用程序进行隔离,权限管理和quota分配等  &lt;/li&gt;
&lt;li&gt;每个container拥有自己独立的各种命名空间(亦即资源)包括:&lt;br&gt;PID 进程, MNT 文件系统, NET 网络, IPC , UTS 主机名 等&lt;br&gt;与任何容器技术一样，就该程序而言，它有自己的文件系统、存储系统、处理器和内存等部件。容器与虚拟机之间的区别主要在于，虚拟机管理程序对整个设备进行抽象处理，而容器只是对操作系统内核进行抽象处理。  &lt;/li&gt;
&lt;li&gt;虚拟机管理程序能做容器做不了的一件事就是，使kernel-3.10.0-229.el7.x86_64用不同的操作系统或内核。所以，举例说，你可以使用微软Azure，同时运行Windows Server2012的实例和SUSE Linux企业级服务器的实例。至于Docker，所有容器都必须使用同样的操作系统和内核。&lt;/li&gt;
&lt;li&gt;Docker 概念及相互作用&lt;/li&gt;
&lt;li&gt;主机， 运行容器的机器。&lt;/li&gt;
&lt;li&gt;镜像，文件的层次结构，以及包含如何运行容器的元数据&lt;/li&gt;
&lt;li&gt;容器，一个从镜像中启动，包含正在运行的程序的进程&lt;/li&gt;
&lt;li&gt;Registry， 镜像仓库&lt;/li&gt;
&lt;li&gt;卷，容器外的存储  &lt;/li&gt;
&lt;li&gt;Dockerfile， 用于创建镜像的脚本  &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;docker能用来干什么？&quot;&gt;&lt;a href=&quot;#docker能用来干什么？&quot; class=&quot;headerlink&quot; title=&quot;docker能用来干什么？&quot;&gt;&lt;/a&gt;docker能用来干什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;快速交付你的应用程序&lt;br&gt;Docker可以为你的开发过程提供完美的帮助。Docker允许开发者在本地包含了应用程序和服务的容器进行开发，之后可以集成到连续的一体化和部署工作流中。&lt;/li&gt;
&lt;li&gt;开发和拓展更加简单&lt;br&gt;Docker的以容器为基础的平台允许高度可移植的工作。Docker容器可以在开发者机器上运行，也可以在实体或者虚拟机上运行，也可以在云平台上运行。&lt;br&gt;Docker的可移植、轻量特性同样让动态地管理负载更加简单。你可以用Docker快速地增加应用规模或者关闭应用程序和服务。Docker的快速意味着变动几乎是实时的。&lt;/li&gt;
&lt;li&gt;达到高密度和更多负载&lt;br&gt;Docker轻巧快速，它提供了一个可行的、 符合成本效益的替代基于虚拟机管理程序的虚拟机。这在高密度的环境下尤其有用。例如，构建你自己的云平台或者PaaS，在中小的部署环境下同样可以获取到更多的资源性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;docker主要组成有哪些？&quot;&gt;&lt;a href=&quot;#docker主要组成有哪些？&quot; class=&quot;headerlink&quot; title=&quot;docker主要组成有哪些？&quot;&gt;&lt;/a&gt;docker主要组成有哪些？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Docker有两个主要的部件：  &lt;blockquote&gt;
&lt;p&gt;Docker: 开源的容器虚拟化平台。&lt;br&gt;Docker Hub: 用于分享、管理Docker容器的Docker SaaS平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Docker的内部&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Docker镜像 (Docker images)。&lt;/li&gt;
&lt;li&gt;Docker仓库 (Docker registeries)。&lt;/li&gt;
&lt;li&gt;Docker容器(Docker containers)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Docker镜像&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Docker镜像是一个只读的模板。举个例子，一个镜像可以包含一个运行在Apache上的Web应用和其使用的Ubuntu操作系统。&lt;/li&gt;
&lt;li&gt;镜像是用来创建容器的。Docker提供了简单的放来来建立新的镜像或者升级现有的镜像，你也可以下载别人已经创建好的镜像。Docker镜像是Docker的 构造 部分&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Docker仓库&lt;blockquote&gt;
&lt;p&gt;Docker仓库用来保存镜像。可以理解为代码控制中的代码仓库。同样的，Docker仓库也有公有和私有的概念。公有的Docker仓库名字是Docker Hub。Docker Hub提供了庞大的镜像集合供使用。这些镜像可以是你自己创建的，或者你也可以在别人的镜像基础上创建。Docker仓库是Docker的 分发 部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Docker容器&lt;blockquote&gt;
&lt;p&gt;Docker容器和文件夹很类似。一个Docker容器包含了所有的某个应用运行所需要的环境。每一个Docker容器都是从Docker镜像创建 的。Docker容器可以运行、开始、停止、移动和删除。每一个Docker容器都是独立和安全的应用平台。Docker容器是Docker的 运行 部分。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;首先更新yum源，添加rhel7.1的iso镜像，来更新内核kernel(因为docker对内核有要求，rhel7.0时启动慢)  &lt;blockquote&gt;
&lt;p&gt;1.自己下载cestos7.1的镜像，构建本地yum&lt;br&gt;2.使用163或者网易的yum源&lt;br&gt;yum update kernel -y&lt;br&gt;rpm -q kernel&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kernel-3.10.0-123.el7.x86_64&lt;br&gt;kernel-3.10.0-229.el7.x86_64  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重启，选择kernel-3.10.0-229.el7.x86_64进入系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;更新相关组件  &lt;blockquote&gt;
&lt;p&gt;yum update device-mapper -y&lt;br&gt;rpm -qa | grep device-mapper&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;device-mapper-persistent-data-0.3.2-1.el7.x86_64&lt;br&gt;device-mapper-libs-1.02.93-3.el7.x86_64&lt;br&gt;device-mapper-multipath-0.4.9-66.el7.x86_64&lt;br&gt;device-mapper-event-libs-1.02.93-3.el7.x86_64&lt;br&gt;device-mapper-multipath-libs-0.4.9-66.el7.x86_64&lt;br&gt;device-mapper-event-1.02.93-3.el7.x86_64&lt;br&gt;device-mapper-1.02.93-3.el7.x86_64  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;安装docker  &lt;blockquote&gt;
&lt;p&gt;3.1 执行Docker安装脚本&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; curl -sSL &lt;a href=&quot;https://get.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://get.docker.com/&lt;/a&gt; | sh&lt;br&gt;yum install -y docker-selinux&lt;br&gt;这个脚本会添加 docker.repo 配置并安装Docker。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.2 自动添加添加yum仓库&lt;br&gt;&lt;pre&gt;&lt;code&gt;&lt;br&gt;cat &amp;gt;/etc/yum.repos.d/docker.repo &amp;lt;&amp;lt;-EOF&lt;br&gt;[dockerrepo]&lt;br&gt;name=Docker Repository&lt;br&gt;baseurl=&lt;a href=&quot;https://yum.dockerproject.org/repo/main/centos/7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://yum.dockerproject.org/repo/main/centos/7&lt;/a&gt;&lt;br&gt;enabled=1&lt;br&gt;gpgcheck=1&lt;br&gt;gpgkey=&lt;a href=&quot;https://yum.dockerproject.org/gpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://yum.dockerproject.org/gpg&lt;/a&gt;&lt;br&gt;EOF&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;安装Docker包&lt;br&gt;yum install -y docker-engine&lt;br&gt;yum install -y docker-selinux&lt;br&gt;yum list installed | grep docker  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-engine.x86_64             1.8.1-1.el7.centos                    @dockerrepo&lt;br&gt;docker-selinux.x86_64            1.7.1-108.el7.centos                  @extras  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.3 rpm安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install docker-engine-1.8.3-1.el7.centos.x86_64.rpm  -y&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;启动docker&lt;blockquote&gt;
&lt;p&gt;systemctl start docker&lt;br&gt;docker version   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Client:&lt;br&gt;Version:      1.8.1&lt;br&gt;API version:  1.20&lt;br&gt;Go version:   go1.4.2&lt;br&gt;Git commit:   d12ea79&lt;br&gt;Built:        Thu Aug 13 02:19:43 UTC 2015&lt;br&gt;OS/Arch:      linux/amd64  &lt;/p&gt;
&lt;p&gt;Server:&lt;br&gt;Version:      1.8.1&lt;br&gt;API version:  1.20&lt;br&gt;Go version:   go1.4.2&lt;br&gt;Git commit:   d12ea79&lt;br&gt;Built:        Thu Aug 13 02:19:43 UTC 2015&lt;br&gt;OS/Arch:      linux/amd64  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;docker使用&quot;&gt;&lt;a href=&quot;#docker使用&quot; class=&quot;headerlink&quot; title=&quot;docker使用&quot;&gt;&lt;/a&gt;docker使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有关镜像的操作  &lt;blockquote&gt;
&lt;p&gt;$ docker images  # 查看所有镜像.&lt;br&gt;$ docker import  # 从tarball创建镜像&lt;br&gt;$ docker build   # 通过Dockerfile创建镜像&lt;br&gt;$ docker commit  # 从容器中创建镜像&lt;br&gt;$ docker rmi     # 删除镜像&lt;br&gt;$ docker history # 列出镜像的变更历史  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;运行的容器  &lt;blockquote&gt;
&lt;p&gt;$ docker create  # 创建一个容器，但不启动它&lt;br&gt;$ docker run     #  创建并启动一个容器&lt;br&gt;$ docker stop    # 停止容器&lt;br&gt;$ docker start   #  启动容器&lt;br&gt;$ docker restart # 重启容器&lt;br&gt;$ docker rm      # 删除容器&lt;br&gt;$ docker kill    #  给容器发送kill信号&lt;br&gt;$ docker attach  # 连接到正在运行的容器中&lt;br&gt;$ docker wait    # 阻塞直到容器停止为止&lt;br&gt;$ docker exec    # 在运行的容器中执行一条命令  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;检查容器  &lt;blockquote&gt;
&lt;p&gt;$ docker ps      # 显示运行的容器&lt;br&gt;$ docker inspect # 显示容器信息（包括ip地址）&lt;br&gt;$ docker logs    # 获取容器中的日志&lt;br&gt;$ docker events  # 获取容器事件&lt;br&gt;$ docker port    # 显示容器的公开端口&lt;br&gt;$ docker top     # 显示容器中运行的进程&lt;br&gt;$ docker diff    # 查看容器文件系统中改变的文件&lt;br&gt;$ docker stats   # 查看各种纬度数据、内存、CPU、文件系统等  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之后的会继续更新博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker是什么？&quot;&gt;&lt;a href=&quot;#docker是什么？&quot; class=&quot;headerlink&quot; title=&quot;docker是什么？&quot;&gt;&lt;/a&gt;docker是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简单的说Docker是一个构建在LXC之上的,基于进程容器(Processcontainer)的轻量级VM解决方案&lt;br&gt;Docker的初衷也就是将各种应用程序和他们所依赖的运行环境打包成标准的Container/image,进而发布到不同的平台上运行。  也是由go写成的轻量级容器&lt;/li&gt;
&lt;li&gt;Docker container和普通的虚拟机Image相比, 最大的区别是它并不包含操作系统内核
    
    </summary>
    
      <category term="docker" scheme="https://iceziyao.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://iceziyao.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>C语言实现pwd,ls命令</title>
    <link href="https://iceziyao.github.io/2016/04/01/C/bin/pwd-ls/"/>
    <id>https://iceziyao.github.io/2016/04/01/C/bin/pwd-ls/</id>
    <published>2016-03-31T16:00:00.000Z</published>
    <updated>2016-09-13T22:11:54.429Z</updated>
    
    <content type="html">&lt;h1 id=&quot;实现pwd&quot;&gt;&lt;a href=&quot;#实现pwd&quot; class=&quot;headerlink&quot; title=&quot;实现pwd&quot;&gt;&lt;/a&gt;实现pwd&lt;/h1&gt;&lt;p&gt;   实现pwd打印当前目录&lt;/p&gt;
&lt;h2 id=&quot;所需函数-getcwd&quot;&gt;&lt;a href=&quot;#所需函数-getcwd&quot; class=&quot;headerlink&quot; title=&quot;所需函数 getcwd&quot;&gt;&lt;/a&gt;所需函数 getcwd&lt;/h2&gt;&lt;p&gt;函数原型：char *getcwd( char *buffer, int maxlen );&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功 能：获取当前工作目录&lt;/li&gt;
&lt;li&gt;参数说明：getcwd()会将当前工作目录的绝对路径复制到参数buffer所指的内存空间中,参数maxlen为buffer的空间大小。&lt;/li&gt;
&lt;li&gt;返 回 值：成功则返回当前工作目录，失败返回 FALSE。&lt;/li&gt;
&lt;li&gt;在某些 Unix 的变种下，如果任何父目录没有设定可读或搜索模式，即使当前目录设定了，getcwd()还是会返回 FALSE。有关模式与权限的更多信息见 chmod()。&lt;/li&gt;
&lt;li&gt;头文件：unistd.h（windows下为direct.h）&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;int main(void)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    printf(&amp;quot;%s\n&amp;quot;,getcwd(NULL,0));  //输出获取路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return 0;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实现ls&quot;&gt;&lt;a href=&quot;#实现ls&quot; class=&quot;headerlink&quot; title=&quot;实现ls&quot;&gt;&lt;/a&gt;实现ls&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;实现pwd&quot;&gt;&lt;a href=&quot;#实现pwd&quot; class=&quot;headerlink&quot; title=&quot;实现pwd&quot;&gt;&lt;/a&gt;实现pwd&lt;/h1&gt;&lt;p&gt;   实现pwd打印当前目录&lt;/p&gt;
&lt;h2 id=&quot;所需函数-getcwd&quot;&gt;&lt;a href=&quot;#所需函数-getcwd&quot; class=&quot;headerlink&quot; title=&quot;所需函数 getcwd&quot;&gt;&lt;/a&gt;所需函数 getcwd&lt;/h2&gt;&lt;p&gt;函数原型：char *getcwd( char *buffer, int maxlen );&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;功 能：获取当前工作目录&lt;/li&gt;
&lt;li&gt;参数说明：getcwd()会将当前工作目录的绝对路径复制到参数buffer所指的内存空间中,参数maxlen为buffer的空间大小。&lt;/li&gt;
&lt;li&gt;返 回 值：成功则返回当前工作目录，失败返回 FALSE。&lt;/li&gt;
&lt;li&gt;在某些 Unix 的变种下，如果任何父目录没有设定可读或搜索模式，即使当前目录设定了，getcwd()还是会返回 FALSE。有关模式与权限的更多信息见 chmod()。&lt;/li&gt;
&lt;li&gt;头文件：unistd.h（windows下为direct.h）
    
    </summary>
    
      <category term="C" scheme="https://iceziyao.github.io/categories/C/"/>
    
    
      <category term="Linux" scheme="https://iceziyao.github.io/tags/Linux/"/>
    
      <category term="C" scheme="https://iceziyao.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>深入了解LVS</title>
    <link href="https://iceziyao.github.io/2016/02/12/Lvs/LVS2/"/>
    <id>https://iceziyao.github.io/2016/02/12/Lvs/LVS2/</id>
    <published>2016-02-11T16:00:00.000Z</published>
    <updated>2016-08-29T23:22:02.334Z</updated>
    
    <content type="html">&lt;h2 id=&quot;LVS的工作原理&quot;&gt;&lt;a href=&quot;#LVS的工作原理&quot; class=&quot;headerlink&quot; title=&quot;LVS的工作原理&quot;&gt;&lt;/a&gt;LVS的工作原理&lt;/h2&gt;&lt;p&gt;LVS的IP负载均衡技术是通过ipvs内核模块来实现的，ipvs是LVS集群系统的核心软件，它的主要作用是：安装在Director Server上，同时在Director Server上虚拟出一个IP地址，用户必须通过这个虚拟的IP地址访问集群服务。这个虚拟IP一般称为LVS的VIP，即Virtual IP。访问的请求首先经过VIP到达负载调度器，然后由负载调度器从Real Server列表中选取一个服务节点响应用户的请求。当用户的请求到达负载调度器后，调度器如何将请求发送到提供服务的Real Server节点，而Real Server节点如何返回数据给用户，是ipvs实现的重点技术，ipvs实现负载均衡机制有四种，分别是NAT、TUN和DR以及后来经淘宝开发的FullNat。下面将详细介绍这四种机制的工作模型。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;工作原理&quot;&gt;&lt;a href=&quot;#工作原理&quot; class=&quot;headerlink&quot; title=&quot;工作原理&quot;&gt;&lt;/a&gt;工作原理&lt;/h2&gt;&lt;p&gt;LVS分为两个部件：ipvs和ipvsadm&lt;br&gt;      ipvs ： 工作于内核空间，主要用于使用户定义的策略生效；&lt;br&gt;      ipvsadm : 工作于用户空间，主要用于用户定义和管理集群服务的工具；&lt;/p&gt;
&lt;h3 id=&quot;LVS内核模型&quot;&gt;&lt;a href=&quot;#LVS内核模型&quot; class=&quot;headerlink&quot; title=&quot;LVS内核模型&quot;&gt;&lt;/a&gt;LVS内核模型&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/upload/lvs.png&quot; alt=&quot;lvs内核模型&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当客户端的请求到达负载均衡器的内核空间时，首先会到达PREROUTING链。&lt;/li&gt;
&lt;li&gt;当内核发现请求数据包的目的地址是本机时，将数据包送往INPUT链。&lt;/li&gt;
&lt;li&gt;LVS由用户空间的ipvsadm和内核空间的IPVS组成，ipvsadm用来定义规则，IPVS利用ipvsadm定义的规则工作，IPVS工作在INPUT链上,当数据包到达INPUT链时，首先会被IPVS检查，如果数据包里面的目的地址及端口没有在规则里面，那么这条数据包将被放行至用户空间。&lt;/li&gt;
&lt;li&gt;如果数据包里面的目的地址及端口在规则里面，那么这条数据报文将被修改目的地址为事先定义好的后端服务器，并送往POSTROUTING链。&lt;/li&gt;
&lt;li&gt;最后经由POSTROUTING链发往后端服务器。  &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;LVS对-IP包的处理模式&quot;&gt;&lt;a href=&quot;#LVS对-IP包的处理模式&quot; class=&quot;headerlink&quot; title=&quot;LVS对 IP包的处理模式&quot;&gt;&lt;/a&gt;LVS对 IP包的处理模式&lt;/h3&gt;&lt;p&gt;IP包处理用Linux内核的Netfilter框架完成&lt;br&gt;通俗的说，netfilter的架构就是在整个网络流程的若干位置放置了一些检测点（HOOK），而在每个检测点上上登记了一些处理函数进行处理（如包过滤，NAT等，甚至可以是用户自定义的功能）。&lt;br&gt;&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NF_IP_PRE_ROUTING：刚刚进入网络层的数据包通过此点（刚刚进行完版本号，校验和等检测），源地址转换在此点进行;  &lt;/li&gt;
&lt;li&gt;NF_IP_LOCAL_IN：经路由查找后，送往本机的通过此检查点,INPUT包过滤在此点进行;  &lt;/li&gt;
&lt;li&gt;NF_IP_FORWARD：要转发的包通过此检测点,FORWORD包过滤在此点进行;  &lt;/li&gt;
&lt;li&gt;NF_IP_LOCAL_OUT：本机进程发出的包通过此检测点，OUTPUT包过滤在此点进行;  &lt;/li&gt;
&lt;li&gt;NF_IP_POST_ROUTING：所有马上便要通过网络设备出去的包通过此检测点，内置的目的地址转换功能（包括地址伪装）在此点进行。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;LVS中Netfiler的实现&quot;&gt;&lt;a href=&quot;#LVS中Netfiler的实现&quot; class=&quot;headerlink&quot; title=&quot;LVS中Netfiler的实现&quot;&gt;&lt;/a&gt;LVS中Netfiler的实现&lt;/h4&gt;&lt;p&gt;　　利用Netfilter，LVS处理数据报从左边进入系统，进行IP校验以后，数据报经过第一个钩子函数NF_IP_PRE_ROUTING [HOOK1]进行处理；然后进行路由选择，决定该数据报是需要转发还是发给本机；若该数据报是发被本机的，则该数据经过钩子函数 NF_IP_LOCAL_IN[HOOK2]处理后传递给上层协议；若该数据报应该被转发，则它被NF_IP_FORWARD[HOOK3]处理；经过转发的数据报经过最后一个钩子函数NF_IP_POST_ROUTING[HOOK4]处理以后，再传输到网络上。本地产生的数据经过钩子函数 NF_IP_LOCAL_OUT[HOOK5]处理后，进行路由选择处理，然后经过NF_IP_POST_ROUTING[HOOK4]处理后发送到网络上。&lt;br&gt;　　当启动IPVS加载ip_vs模块时，模块的初始化函数ip_vs_init( )注册了NF_IP_LOCAL_IN[HOOK2]、NF_IP_FORWARD[HOOK3]、NF_IP_POST_ROUTING[HOOK4] 钩子函数用于处理进出的数据报。  &lt;/p&gt;
&lt;h4 id=&quot;NF-IP-LOCAL-IN处理过程&quot;&gt;&lt;a href=&quot;#NF-IP-LOCAL-IN处理过程&quot; class=&quot;headerlink&quot; title=&quot;NF_IP_LOCAL_IN处理过程&quot;&gt;&lt;/a&gt;NF_IP_LOCAL_IN处理过程&lt;/h4&gt;&lt;p&gt;　　用户向虚拟服务器发起请求，数据报经过NF_IP_LOCAL_IN[HOOK2],进入ip_vs_in( )进行处理。如果传入的是icmp数据报，则调用ip_vs_in_icmp( )；否则继续判断是否为tcp/udp数据报，如果不是tcp/udp数据报，则函数返回NF_ACCEPT(让内核继续处理该数据报)；余下情况便是处理tcp/udp数据报。首先，调用ip_vs_header_check( )检查报头，如果异常，则函数返回NF_DROP(丢弃该数据报)。接着，调用ip_vs_conn_in_get( )去ip_vs_conn_tab表中查找是否存在这样的连接：它的客户机和虚拟服务器的ip地址和端口号以及协议类型均与数据报中的相应信息一致。如果不存在相应连接，则意味着连接尚未建立，此时如果数据报为tcp的sync报文或udp数据报则查找相应的虚拟服务器；如果相应虚拟服务器存在但是已经满负荷，则返回NF_DROP；如果相应虚拟服务器存在并且未满负荷，那么调用ip_vs_schedule( )调度一个RS并创建一个新的连接，如果调度失败则调用ip_vs_leave( )继续传递或者丢弃数据报。如果存在相应连接，首先判断连接上的RS是否可用，如果不可用则处理相关信息后返回NF_DROP。找到已存在的连接或建立新的连接后，修改系统记录的相关信息如传入的数据报的个数等。如果这个连接在创建时绑定了特定的数据报传输函数，调用这个函数传输数据报，否则返回 NF_ACCEPT。&lt;/p&gt;
&lt;p&gt;　　ip_vs_in()调用的ip_vs_in_icmp( )处理icmp报文。函数开始时检查数据报的长度，如果异常则返回NF_DROP。函数只处理由tcp/udp报文传送错误引起的目的不可达、源端被关闭或超时的icmp报文，其他情况则让内核处理。针对上述三类报文，首先检查检验和。如果检验和错误，直接返回NF_DROP；否则，分析返回的icmp差错信息，查找相应的连接是否存在。如果连接不存在，返回NF_ACCEPT；如果连接存在，根据连接信息，依次修改差错信息包头的ip地址与端口号及 ICMP数据报包头的ip地址，并重新计算和修改各个包头中的检验和，之后查找路由调用ip_send( )发送修改过的数据报，并返回NF_STOLEN(退出数据报的处理过程)。&lt;/p&gt;
&lt;p&gt;　　ip_vs_in()调用的函数ip_vs_schedule( )为虚拟服务器调度可用的RS并建立相应连接。它将根据虚拟服务器绑定的调度算法分配一个RS，如果成功，则调用ip_vs_conn_new( )建立连接。ip_vs_conn_new( )将进行一系列初始化操作：设置连接的协议、ip地址、端口号、协议超时信息，绑定application helper、RS和数据报传输函数，最后调用ip_vs_conn_hash( )将这个连接插入哈希表ip_vs_conn_tab中。一个连接绑定的数据报传输函数，依据IPVS工作方式可分为ip_vs_nat_xmit( )、ip_vs_tunnel_xmit( )、ip_vs_dr_xmit( )。例如ip_vs_nat_xmit( )的主要操作是：修改报文的目的地址和目的端口为RS信息，重新计算并设置检验和，调用ip_send( )发送修改后的数据报。&lt;/p&gt;
&lt;h4 id=&quot;NF-IP-FORWARD处理过程&quot;&gt;&lt;a href=&quot;#NF-IP-FORWARD处理过程&quot; class=&quot;headerlink&quot; title=&quot;NF_IP_FORWARD处理过程&quot;&gt;&lt;/a&gt;NF_IP_FORWARD处理过程&lt;/h4&gt;&lt;p&gt;　　数据报进入NF_IP_FORWARD后，将进入ip_vs_out( )进行处理。这个函数只在NAT方式下被调用。它首先判断数据报类型，如果为icmp数据报则直接调用ip_vs_out_icmp( )；其次判断是否为tcp/udp数据报，如果不是这二者则返回NF_ACCEPT。余下就是tcp/udp数据报的处理。首先，调用 ip_vs_header_check( )检查报头，如果异常则返回NF_DROP。其次，调用ip_vs_conn_out_get( )判断是否存在相应的连接。若不存在相应连接：调用ip_vs_lookup_real_service( )去哈希表中查找发送数据报的RS是否仍然存在，如果RS存在且报文是tcp非复位报文或udp 报文，则调用icmp_send( )给RS发送目的不可达icmp报文并返回NF_STOLEN；其余情况下均返回NF_ACCEPT。若存在相应连接：检查数据报的检验和，如果错误则返回NF_DROP，如果正确，修改数据报，将源地址修改为虚拟服务器ip地址，源端口修改为虚拟服务器端口号，重新计算并设置检验和，并返回 NF_ACCEPT。&lt;/p&gt;
&lt;p&gt;　　ip_vs_out_icmp( )的流程与ip_vs_in_icmp( )类似，只是修改数据报时有所区别：ip报头的源地址和差错信息中udp或tcp报头的目的地址均修改为虚拟服务器地址，差错信息中udp或tcp报头的目的端口号修改为虚拟服务器的端口号。&lt;/p&gt;
&lt;h4 id=&quot;NF-IP-POST-ROUTING处理过程&quot;&gt;&lt;a href=&quot;#NF-IP-POST-ROUTING处理过程&quot; class=&quot;headerlink&quot; title=&quot;NF_IP_POST_ROUTING处理过程&quot;&gt;&lt;/a&gt;NF_IP_POST_ROUTING处理过程&lt;/h4&gt;&lt;p&gt;　　NF_IP_POST_ROUTING钩子函数只在NAT方式下使用。数据报进入NF_IP_POST_ROUTING后,由 ip_vs_post_routing( )进行处理。它首先判断数据报是否经过IPVS，如果未经过则返回NF_ACCEPT；否则立刻传输数据报，函数返回NF_STOLEN，防止数据报被 iptable的规则修改。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LVS的工作原理&quot;&gt;&lt;a href=&quot;#LVS的工作原理&quot; class=&quot;headerlink&quot; title=&quot;LVS的工作原理&quot;&gt;&lt;/a&gt;LVS的工作原理&lt;/h2&gt;&lt;p&gt;LVS的IP负载均衡技术是通过ipvs内核模块来实现的，ipvs是LVS集群系统的核心软件，它的主要作用是：安装在Director Server上，同时在Director Server上虚拟出一个IP地址，用户必须通过这个虚拟的IP地址访问集群服务。这个虚拟IP一般称为LVS的VIP，即Virtual IP。访问的请求首先经过VIP到达负载调度器，然后由负载调度器从Real Server列表中选取一个服务节点响应用户的请求。当用户的请求到达负载调度器后，调度器如何将请求发送到提供服务的Real Server节点，而Real Server节点如何返回数据给用户，是ipvs实现的重点技术，ipvs实现负载均衡机制有四种，分别是NAT、TUN和DR以及后来经淘宝开发的FullNat。下面将详细介绍这四种机制的工作模型。&lt;br&gt;
    
    </summary>
    
      <category term="负载均衡" scheme="https://iceziyao.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="负载均衡" scheme="https://iceziyao.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="lvs" scheme="https://iceziyao.github.io/tags/lvs/"/>
    
  </entry>
  
  <entry>
    <title>Lvs负载均衡</title>
    <link href="https://iceziyao.github.io/2016/02/01/Lvs/lvs1/"/>
    <id>https://iceziyao.github.io/2016/02/01/Lvs/lvs1/</id>
    <published>2016-01-31T16:00:00.000Z</published>
    <updated>2016-08-29T21:12:12.802Z</updated>
    
    <content type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;LVS是Linux Virtual Server的简称，也就是Linux虚拟服务器, 是一个由章文嵩博士发起的自由软件项目。&lt;br&gt;在Linux2.4内核以前，使用LVS时必须要重新编译内核以支持LVS功能模块，但是从Linux2.4内核以后，已经完全内置了LVS的各个功能模块，无需给内核打任何补丁，可以直接使用LVS提供的各种功能。&lt;br&gt;使用LVS技术要达到的目标是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过LVS提供的负载均衡技术和Linux操作系统实现一个高性能、高可用的服务器群集，它具有良好可靠性、可扩展性和可操作性。从而以低廉的成本实现最优的服务性能。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;LVS体系结构&quot;&gt;&lt;a href=&quot;#LVS体系结构&quot; class=&quot;headerlink&quot; title=&quot;LVS体系结构&quot;&gt;&lt;/a&gt;LVS体系结构&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;LVS体系结构下图所示：&lt;br&gt;&lt;img src=&quot;/upload/Lvs.png&quot; alt=&quot;Lvs&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LVS 集群分为三层结构:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;负载调度器(load balancer)：它是整个LVS 集群对外的前端机器，负责将client请求发送到一组服务器[多台LB IP]上执行，而client端认为是返回来一个同一个IP【通常把这个IP 称为虚拟IP/VIP】&lt;/li&gt;
&lt;li&gt;服务器池(server pool)：一组真正执行client&lt;/li&gt;
&lt;li&gt;共享存储(shared stored)：它为 server pool 提供了一个共享的存储区，很容易让服务器池拥有相同的内容，提供相同的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;工作模式&quot;&gt;&lt;a href=&quot;#工作模式&quot; class=&quot;headerlink&quot; title=&quot;工作模式&quot;&gt;&lt;/a&gt;工作模式&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DR&lt;/li&gt;
&lt;li&gt;NAT&lt;/li&gt;
&lt;li&gt;隧道模式&lt;/li&gt;
&lt;li&gt;FULL NAT 模式&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;p&gt;目前系统有八种负载均衡调度算法，具体如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;rr：轮循调度(Round-Robin) 它将请求依次分配不同的RS，也就是在RS中均摊请求。这种算法简单，但是只适合于RS处理性能相差不大的情况。&lt;/li&gt;
&lt;li&gt;wrr：加权轮循调度(Weighted Round-Robin) 它将依据不同RS的权值分配任务。权值较高的RS将优先获得任务，并且分配到的连接数将比权值较低的RS更多。相同权值的RS得到相同数目的连接数。&lt;/li&gt;
&lt;li&gt;dh：目的地址哈希调度 (Destination Hashing) 以目的地址为关键字查找一个静态hash表来获得需要的RS。&lt;/li&gt;
&lt;li&gt;sh：源地址哈希调度(Source Hashing) 以源地址为关键字查找一个静态hash表来获得需要的RS。&lt;/li&gt;
&lt;li&gt;Lc：最小连接数调度(Least-Connection) IPVS表存储了所有的活动的连接。把新的连接请求发送到当前连接数最小的RS。&lt;/li&gt;
&lt;li&gt;Wlc：加权最小连接数调度(Weighted Least-Connection) 假设各台RS的权值依次为Wi（I = 1..n），当前的TCP连接数依次为Ti（I＝1..n），依次选取Ti/Wi为最小的RS作为下一个分配的RS。&lt;/li&gt;
&lt;li&gt;Lblc：基于地址的最小连接数调度(Locality-Based Least-Connection) 将来自同一目的地址的请求分配给同一台RS如果这台服务器尚未满负荷，否则分配给连接数最小的RS，并以它为下一次分配的首先考虑。&lt;/li&gt;
&lt;li&gt;Lblcr：基于地址的带重复最小连接数调度(Locality-Based Least-Connection with Replication) 对于某一目的地址，对应有一个RS子集。对此地址的请求，为它分配子集中连接数最小的RS；如果子集中所有的服务器均已满负荷，则从集群中选择一个连接数较小的服务器，将它加入到此子集并分配连接；若一定时间内，这个子集未被做任何修改，则将子集中负载最大的节点从子集删除。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;LVS是Linux Virtual Server的简称，也就是Linux虚拟服务器, 是一个由章文嵩博士发起的自由软件项目。&lt;br&gt;在Linux2.4内核以前，使用LVS时必须要重新编译内核以支持LVS功能模块，但是从Linux2.4内核以后，已经完全内置了LVS的各个功能模块，无需给内核打任何补丁，可以直接使用LVS提供的各种功能。&lt;br&gt;使用LVS技术要达到的目标是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过LVS提供的负载均衡技术和Linux操作系统实现一个高性能、高可用的服务器群集，它具有良好可靠性、可扩展性和可操作性。从而以低廉的成本实现最优的服务性能。&lt;br&gt;
    
    </summary>
    
      <category term="负载均衡" scheme="https://iceziyao.github.io/categories/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
    
      <category term="负载均衡" scheme="https://iceziyao.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="lvs" scheme="https://iceziyao.github.io/tags/lvs/"/>
    
  </entry>
  
</feed>
